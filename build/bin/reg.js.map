{"version":3,"sources":["../../src/bin/reg.js"],"names":["findDefault","addresses","AddressId","find","IsDefault","register","nc","domain","users","address","getList","id","getInfo","console","log","printAddress","y","text","defaultValue","ChargedAmount","domains","create","FirstName","LastName","Address1","Address2","City","Zip","Country","EmailAddress"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;;;AADqC;;AAGrC;;;;;AAKO,MAAMA,cAAeC,SAAD,IAAe;AACxC,QAAM;AAAEC;AAAF,MAAgBD,UAAUE,IAAV,CAAe,CAAC;AAAEC;AAAF,GAAD,KAAmBA,SAAlC,KAAgD,EAAtE;AACA,SAAOF,SAAP;AACD,CAHM;AAKP;;;;;AACe,eAAeG,QAAf,CAAwBC,EAAxB,EAA4B;AACzCC;AADyC,CAA5B,EAEZ;AACD,QAAMN,YAAY,MAAMK,GAAGE,KAAH,CAASC,OAAT,CAAiBC,OAAjB,EAAxB;AACA,QAAMC,KAAKX,YAAYC,SAAZ,CAAX;AACA,QAAMQ,UAAU,MAAMH,GAAGE,KAAH,CAASC,OAAT,CAAiBG,OAAjB,CAAyB;AAAED;AAAF,GAAzB,CAAtB;AACAE,UAAQC,GAAR,CAAY,kBAAZ;AACAC,eAAaN,OAAb;AACA,QAAMO,IAAI,MAAM,sBAAU;AACxBC,UAAM,KADkB;AAExBC,kBAAc;AAFU,GAAV,CAAhB;AAIA,MAAIF,KAAK,GAAT,EAAc;AACd,QAAM;AAAEG;AAAF,MAAoB,MAAMb,GAAGc,OAAH,CAAWC,MAAX,CAAkB;AAChDd,UADgD;AAEhDE;AAFgD,GAAlB,CAAhC;AAIAI,UAAQC,GAAR,CAAY,kDAAZ,EAAgE,aAAEP,MAAF,EAAU,OAAV,CAAhE,EAAoFY,aAApF;AACD;;AAED,MAAMJ,eAAe,CAAC;AAAEO,WAAF;AAAaC,UAAb;AAAuBC,UAAvB;AAAiCC,UAAjC;AAA2CC,MAA3C;AAAiDC,KAAjD;AAAsDC,SAAtD;AAA+DC;AAA/D,CAAD,KAAmF;AACtGhB,UAAQC,GAAR,CAAY,YAAZ,EAA0BQ,SAA1B,EAAqCC,QAArC,EAA+CM,YAA/C;AACAhB,UAAQC,GAAR,CAAY,KAAZ,EAAmBU,QAAnB;AACAC,cAAYZ,QAAQC,GAAR,CAAY,KAAZ,EAAmBW,QAAnB,CAAZ;AACAZ,UAAQC,GAAR,CAAY,KAAZ,EAAmBY,IAAnB;AACAb,UAAQC,GAAR,CAAY,SAAZ,EAAuBa,GAAvB,EAA4BC,OAA5B;AACD,CAND","sourcesContent":["import { c } from 'erte'\nimport Namecheap from '../Namecheap' // eslint-disable-line\nimport { askSingle } from 'reloquent/build';\n\n/**\n * Find a default address ID.\n * @param {Address[]} addresses A list of addresses.\n * @returns {number} A default address ID.\n */\nexport const findDefault = (addresses) => {\n  const { AddressId } = addresses.find(({ IsDefault }) => IsDefault) || {}\n  return AddressId\n}\n\n/** @param {Namecheap} nc */\nexport default async function register(nc, {\n  domain,\n}) {\n  const addresses = await nc.users.address.getList()\n  const id = findDefault(addresses)\n  const address = await nc.users.address.getInfo({ id })\n  console.log('Registering for:')\n  printAddress(address)\n  const y = await askSingle({\n    text: 'OK?',\n    defaultValue: 'y',\n  })\n  if (y != 'y') return\n  const { ChargedAmount } = await nc.domains.create({\n    domain,\n    address,\n  })\n  console.log('Successfully registered %s! Charged amount: $%s.', c(domain, 'green'), ChargedAmount)\n}\n\nconst printAddress = ({ FirstName, LastName, Address1, Address2, City, Zip, Country, EmailAddress }) => {\n  console.log(' %s %s, %s', FirstName, LastName, EmailAddress)\n  console.log(' %s', Address1)\n  Address2 && console.log(' %s', Address2)\n  console.log(' %s', City)\n  console.log(' %s, %s', Zip, Country)\n}\n"],"file":"reg.js"}