{"version":3,"sources":["../../src/bin/index.js"],"names":["LOG","DEBUG","test","process","env","NODE_DEBUG","d0","d1","argv","domain","isSingleWord","d","startupyDomains","makeList","map","s","u","console","log","exit","single","domains","undefined","a","global","res","join","stack","message","error"],"mappings":";;AACA;;AACA;;AACA;;;;AAHA;AAKA,MAAMA,MAAM,oBAAS,WAAT,CAAZ;AACA,MAAMC,QAAQ,YAAYC,IAAZ,CAAiBC,QAAQC,GAAR,CAAYC,UAA7B,CAAd;AAEA,MAAM,IAAKC,EAAL,EAASC,EAAT,IAAeJ,QAAQK,IAA7B;AAEA,MAAMC,SAASF,KAAKA,EAAL,GAAUD,EAAzB;;AAGA,MAAMI,eAAeC,KAAK,CAAC,KAAKT,IAAL,CAAUS,CAAV,CAA3B;;AAEA,MAAMC,kBAAkB,CACtB,KADsB,EAEtB,KAFsB,EAGtB,KAHsB,EAItB,KAJsB,EAKtB,MALsB,CAAxB;;AAQA,MAAMC,WAAWF,KAAKC,gBAAgBE,GAAhB,CAAoBC,KAAM,GAAEJ,CAAE,GAAEI,CAAE,EAAlC,CAAtB,CAGE;AACA;AACA;AACA;AACA;AAPF;;AASC,CAAC,YAAY;AACZ,MAAI,CAACN,MAAL,EAAa;AACX,UAAMO,IAAI,wBAAV;AACAC,YAAQC,GAAR,CAAYF,CAAZ;AACAC,YAAQC,GAAR;AACAf,YAAQgB,IAAR,CAAa,CAAb;AACD;;AACD,QAAMC,SAASV,aAAaD,MAAb,CAAf;AACA,QAAMY,UAAUD,SAASP,SAASJ,MAAT,CAAT,GAA4B,EAA5C;AACA,QAAME,IAAIS,SAASE,SAAT,GAAqBb,MAA/B;;AACA,MAAI;AACF,UAAMc,IAAI,MAAM,YAAK;AACnBC,cAAQ;AADW,KAAL,CAAhB;AAGA,UAAMC,MAAM,MAAM,oBAAa,EAC7B,GAAGF,CAD0B;AAE7Bd,cAAQE,CAFqB;AAG7BU;AAH6B,KAAb,CAAlB;AAKAJ,YAAQC,GAAR,CAAY,4BAAZ,EAA0CO,IAAIC,IAAJ,CAAS,IAAT,CAA1C;AACD,GAVD,CAUE,OAAO;AAAEC,SAAF;AAASC;AAAT,GAAP,EAA2B;AAC3B3B,YAAQD,IAAI2B,KAAJ,CAAR,GAAqBV,QAAQY,KAAR,CAAcD,OAAd,CAArB;AACAzB,YAAQgB,IAAR,CAAa,CAAb;AACD;AACF,CAxBA","sourcesContent":["/* eslint-disable no-console */\nimport { debuglog } from 'util'\nimport { checkDomains, auth } from '..'\nimport getUsage from './get-usage'\n\nconst LOG = debuglog('expensive')\nconst DEBUG = /expensive/.test(process.env.NODE_DEBUG)\n\nconst [, , d0, d1] = process.argv\n\nconst domain = d1 ? d1 : d0\n\n\nconst isSingleWord = d => !/\\./.test(d)\n\nconst startupyDomains = [\n  '.co',\n  '.cc',\n  '.io',\n  '.bz',\n  '.app',\n]\n\nconst makeList = d => startupyDomains.map(s => `${d}${s}`)\n\n\n  // const usa = us.reduce((acc, length, i) => {\n  //   const command = commands[i]\n  //   const s = pad(command, i)\n  //   return [...acc, s]\n  // }, [])\n\n;(async () => {\n  if (!domain) {\n    const u = getUsage()\n    console.log(u)\n    console.log()\n    process.exit(1)\n  }\n  const single = isSingleWord(domain)\n  const domains = single ? makeList(domain) : []\n  const d = single ? undefined : domain\n  try {\n    const a = await auth({\n      global: true,\n    })\n    const res = await checkDomains({\n      ...a,\n      domain: d,\n      domains,\n    })\n    console.log('The following are free: %s', res.join(', '))\n  } catch ({ stack, message }) {\n    DEBUG ? LOG(stack) : console.error(message)\n    process.exit(1)\n  }\n})()\n"],"file":"index.js"}