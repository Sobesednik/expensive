{"version":3,"sources":["../../src/bin/index.js"],"names":["LOG","DEBUG","test","process","env","NODE_DEBUG","domain","help","init","version","head","info","sort","desc","filter","type","pageSize","register","command","short","boolean","argv","v","require","console","log","exit","u","run","phone","user","Auth","global","aws_id","aws_key","p","ApiUser","nc","Namecheap","i","domains","getInfo","stack","message","props","colors","Errors","Number","authComplete","error","questions","force","privateQuestions"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n/* eslint-disable no-console */\nimport { debuglog, inspect } from 'util'\nimport argufy from 'argufy'\nimport africa from 'africa'\nimport getUsage from './get-usage'\nimport List from './list'\nimport Check from './check'\nimport Register from './reg'\nimport { getConfig, getInfo } from '..'\nimport getPrivateConfig from '../lib/private-config'\nimport printInfo from '../lib/print/info'\nimport handleRequestIP from '../lib/authenticate/handle-request-ip'\nimport questions, { privateQuestions } from '../questions'\nimport Namecheap from '../Namecheap'\n\nconst LOG = debuglog('expensive')\nconst DEBUG = /expensive/.test(process.env.NODE_DEBUG)\n\nconst {\n  domain,\n  help,\n  init,\n  version,\n  head,\n  info,\n  sort, // name, expire, create\n  desc,\n  filter,\n  type,\n  pageSize,\n  register,\n} = argufy({\n  domain: {\n    command: true,\n  },\n  version: {\n    short: 'v',\n    boolean: true,\n  },\n  help: { short: 'h', boolean: true },\n  init: { short: 'I', boolean: true },\n  head: { short: 'H', boolean: true },\n  info: { short: 'i', boolean: true },\n  // <INFO>\n  sort: 's', // add validation to argufy\n  desc: { short: 'd', boolean: true },\n  filter: { short: 'f' },\n  pageSize: { short: 'p' },\n  type: 't', // add description to argufy, so that usage can be passed to usually\n  // </INFO>\n  register: { short: 'r', boolean: true },\n}, process.argv)\n\nif (version) {\n  const { version: v } = require('../../package.json')\n  console.log(v)\n  process.exit()\n}\n\nif (help) {\n  const u = getUsage()\n  console.log(u)\n  process.exit()\n}\n\n\nconst run = async () => {\n  let phone\n  let user\n  try {\n    const Auth = await getConfig({\n      global: true,\n    })\n    const { aws_id, aws_key, phone: p } = await getPrivateConfig()\n    phone = p\n    user = Auth.ApiUser\n\n    const nc = new Namecheap(Auth)\n\n    if (!domain) {\n      await List(nc, { sort, desc, filter, type, pageSize })\n      return\n    }\n\n    if (info) {\n      const i = await nc.domains.getInfo({ domain })\n      printInfo(i)\n      return\n    }\n\n    if (register) {\n      await Register(nc, { domain })\n      return\n    }\n\n    await Check(nc, {\n      domain,\n    })\n  } catch ({ stack, message, props }) {\n    if (props) {\n      LOG(inspect(props, { colors: true }))\n      LOG(Errors[props.Number])\n    }\n\n    if (props && props.Number == 1011150) {\n      const authComplete = await handleRequestIP(message, { phone, user, head })\n      if (authComplete === true) {\n        await run()\n        // update the configuration to reflect the IP\n        // modify `africa` to be able to update the configuration\n      } else {\n        console.log(authComplete)\n      }\n      return\n    }\n\n    DEBUG ? LOG(stack) : console.error(message)\n    process.exit(1)\n  }\n}\n\nconst Errors = {\n  1011150: 'Parameter RequestIP is invalid',\n  2030166: 'Domain is invalid',\n}\n\n; (async () => {\n  if (init) {\n    await africa('expensive', questions, { force: true })\n    await africa('expensive-client', privateQuestions, { force: true })\n    return\n  }\n  await run()\n})()\n"],"file":"index.js"}