{"version":3,"sources":["../../src/bin/index.js"],"names":["LOG","DEBUG","test","process","env","NODE_DEBUG","domains","help","init","version","head","info","sort","desc","filter","type","pageSize","register","free","zones","command","multiple","short","boolean","v","require","console","log","exit","u","run","phone","user","Auth","global","aws_id","aws_key","p","ApiUser","nc","Namecheap","domain","i","getInfo","stack","message","props","colors","Errors","Number","authComplete","error","questions","force","privateQuestions"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n/* eslint-disable no-console */\nimport { debuglog, inspect } from 'util'\nimport argufy from 'argufy'\nimport africa from 'africa'\nimport getUsage from './get-usage'\nimport List from './list'\nimport Check from './check'\nimport Register from './reg'\nimport { getConfig } from '..'\nimport getPrivateConfig from '../lib/private-config'\nimport printInfo from '../lib/print/info'\nimport handleRequestIP from '../lib/authenticate/handle-request-ip'\nimport questions, { privateQuestions } from '../questions'\nimport Namecheap from '../Namecheap'\n\nconst LOG = debuglog('expensive')\nconst DEBUG = /expensive/.test(process.env.NODE_DEBUG)\n\nconst {\n  domains,\n  help,\n  init,\n  version,\n  head,\n  info,\n  sort, // name, expire, create\n  desc,\n  filter,\n  type,\n  pageSize,\n  register,\n  free,\n  zones,\n} = argufy({\n  domains: {\n    command: true,\n    multiple: true,\n  },\n  version: {\n    short: 'v',\n    boolean: true,\n  },\n  help: { short: 'h', boolean: true },\n  init: { short: 'I', boolean: true },\n  head: { short: 'H', boolean: true },\n  info: { short: 'i', boolean: true },\n  // <INFO>\n  sort: 's', // add validation to argufy\n  desc: { short: 'd', boolean: true },\n  filter: { short: 'f' },\n  pageSize: { short: 'p' },\n  type: 't', // add description to argufy, so that usage can be passed to usually\n  // </INFO>\n  register: { short: 'r', boolean: true },\n  free: { short: 'f', boolean: true },\n  zones: 'z',\n})\n\nif (version) {\n  const { version: v } = require('../../package.json')\n  console.log(v)\n  process.exit()\n}\n\nif (help) {\n  const u = getUsage()\n  console.log(u)\n  process.exit()\n}\n\nconst run = async () => {\n  let phone\n  let user\n  try {\n    const Auth = await getConfig({\n      global: true,\n    })\n    const { aws_id, aws_key, phone: p } = await getPrivateConfig()\n    phone = p\n    user = Auth.ApiUser\n\n    const nc = new Namecheap(Auth)\n\n    if (!domains) {\n      await List(nc, { sort, desc, filter, type, pageSize })\n      return\n    }\n\n    const [domain] = domains\n\n    if (info) {\n      const i = await nc.domains.getInfo({ domain })\n      printInfo(i)\n      return\n    }\n\n    if (register) {\n      await Register(nc, { domain })\n      return\n    }\n\n    await Check(nc, {\n      domains,\n      zones,\n      free,\n    })\n  } catch ({ stack, message, props }) {\n    if (props) {\n      LOG(inspect(props, { colors: true }))\n      LOG(Errors[props.Number])\n    }\n\n    if (props && props.Number == 1011150) {\n      const authComplete = await handleRequestIP(message, { phone, user, head })\n      if (authComplete === true) {\n        await run()\n        // update the configuration to reflect the IP\n        // modify `africa` to be able to update the configuration\n      } else {\n        console.log(authComplete)\n      }\n      return\n    }\n\n    DEBUG ? LOG(stack) : console.error(message)\n    process.exit(1)\n  }\n}\n\nconst Errors = {\n  1011150: 'Parameter RequestIP is invalid',\n  2030166: 'Domain is invalid',\n}\n\n; (async () => {\n  if (init) {\n    await africa('expensive', questions, { force: true })\n    await africa('expensive-client', privateQuestions, { force: true })\n    return\n  }\n  await run()\n})()\n"],"file":"index.js"}