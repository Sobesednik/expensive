{"version":3,"sources":["../../src/bin/index.js"],"names":["LOG","DEBUG","test","process","env","NODE_DEBUG","SANDBOX","domains","help","init","version","info","sort","desc","filter","type","pageSize","register","free","zones","whitelistIP","command","multiple","short","boolean","v","require","console","log","exit","u","run","name","phone","user","Auth","global","packageName","p","ApiUser","nc","Namecheap","domain","i","getInfo","stack","message","props","colors","Errors","Number","ip","error","getAppName","e","initConfig","questions","force","client","privateQuestions"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n/* eslint-disable no-console */\nimport { debuglog, inspect } from 'util'\nimport argufy from 'argufy'\nimport africa from 'africa'\nimport getUsage from './get-usage'\nimport List from './list'\nimport Check from './check'\nimport Register from './reg'\nimport { getConfig } from '..'\nimport getPrivateConfig from '../lib/private-config'\nimport printInfo from '../lib/print/info'\nimport questions, { privateQuestions } from '../questions'\nimport Namecheap from '../Namecheap'\nimport handleIp from '../lib/web/handle-ip'\nimport handleWhitelist from '../lib/web/handle-whitelist'\nimport Errors from './errors.json'\n\nconst LOG = debuglog('expensive')\nconst DEBUG = /expensive/.test(process.env.NODE_DEBUG)\nconst SANDBOX = !!process.env.SANDBOX\n\nconst {\n  domains,\n  help,\n  init,\n  version,\n  info,\n  sort, // name, expire, create\n  desc,\n  filter,\n  type,\n  pageSize,\n  register,\n  free,\n  zones,\n  whitelistIP,\n} = argufy({\n  domains: {\n    command: true,\n    multiple: true,\n  },\n  version: {\n    short: 'v',\n    boolean: true,\n  },\n  help: { short: 'h', boolean: true },\n  init: { short: 'I', boolean: true },\n  info: { short: 'i', boolean: true },\n  // <INFO>\n  sort: 's', // add validation to argufy\n  desc: { short: 'd', boolean: true },\n  filter: { short: 'f' },\n  pageSize: { short: 'p' },\n  type: 't', // add description to argufy, so that usage can be passed to usually\n  // </INFO>\n  register: { short: 'r', boolean: true },\n  free: { short: 'f', boolean: true },\n  zones: 'z',\n  whitelistIP: { short: 'W', boolean: true },\n})\n\nif (version) {\n  const { version: v } = require('../../package.json')\n  console.log(v)\n  process.exit()\n}\n\nif (help) {\n  const u = getUsage()\n  console.log(u)\n  process.exit()\n}\n\nconst run = async (name) => {\n  /** @type {string} */\n  let phone\n  /** @type {string} */\n  let user\n  try {\n    const Auth = await getConfig({\n      global: !SANDBOX,\n      packageName: SANDBOX ? 'sandbox' : null,\n    })\n    const { phone: p } = await getPrivateConfig() // aws_id, aws_key,\n    phone = p\n    user = Auth.ApiUser\n\n    await handleWhitelist(whitelistIP)\n\n    const nc = new Namecheap(Auth)\n\n    if (!domains) {\n      await List(nc, { sort, desc, filter, type, pageSize })\n      return\n    }\n\n    const [domain] = domains\n\n    if (info) {\n      const i = await nc.domains.getInfo({ domain })\n      printInfo(i)\n      return\n    }\n\n    if (register) {\n      await Register(nc, { domain })\n      return\n    }\n\n    await Check(nc, {\n      domains,\n      zones,\n      free,\n    })\n  } catch ({ stack, message, props }) {\n    if (props) {\n      LOG(inspect(props, { colors: true }))\n      LOG(Errors[props.Number])\n    }\n\n    const ip = await handleIp({\n      message,\n      phone,\n      user,\n      name,\n      props,\n    })\n    if (ip) {\n      run(name)\n      return\n    }\n\n    DEBUG ? LOG(stack) : console.error(message)\n    process.exit(1)\n  }\n}\n\nconst getAppName = () => {\n  const e = `${process.env.SANDBOX ? 'sandbox-' : ''}expensive`\n  return e\n}\n\nconst initConfig = async (name) => {\n  const Auth = await africa(name, questions, { force: true })\n  const client = await africa(`${name}-client`, privateQuestions, { force: true })\n  return {\n    Auth,\n    client,\n  }\n}\n\n; (async () => {\n  const name = getAppName()\n  if (init) {\n    await initConfig(name)\n    return\n  }\n  await run(name)\n})()\n"],"file":"index.js"}