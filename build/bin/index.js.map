{"version":3,"sources":["../../src/bin/index.js"],"names":["LOG","DEBUG","test","process","env","NODE_DEBUG","domain","help","init","version","head","info","command","short","boolean","argv","v","require","console","log","exit","u","checkSingleWord","word","auth","domains","length","join","res","reportFree","freeDomains","free","total","reduce","f","t","tt","dd","isFree","some","d","it","percent","printInfo","Created","Expired","WhoisEnabled","Nameservers","EmailDetails","DnsProps","ForwardedTo","ProviderType","run","singleWord","phone","user","Auth","global","aws_id","aws_key","p","ApiUser","i","stack","message","props","colors","Errors","Number","authComplete","error","questions","force","privateQuestions"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n/* eslint-disable no-console */\nimport { c } from 'erte'\nimport { debuglog, inspect } from 'util'\nimport argufy from 'argufy'\nimport getUsage from './get-usage'\nimport { getConfig, checkDomains, getInfo } from '..'\nimport getPrivateConfig from '../lib/private-config'\nimport { makeStartupyList, isSingleWord } from '../lib'\nimport handleRequestIP from '../lib/authenticate/handle-request-ip'\nimport africa from 'africa'\nimport questions, { privateQuestions } from '../questions'\n\nconst LOG = debuglog('expensive')\nconst DEBUG = /expensive/.test(process.env.NODE_DEBUG)\n\nconst {\n  domain,\n  help,\n  init,\n  version,\n  head,\n  info,\n} = argufy({\n  domain: {\n    command: true,\n  },\n  version: {\n    short: 'v',\n    boolean: true,\n  },\n  help: { short: 'h', boolean: true },\n  init: { short: 'I', boolean: true },\n  head: { short: 'H', boolean: true },\n  info: { short: 'i', boolean: true },\n}, process.argv)\n\nif (version) {\n  const { version: v } = require('../../package.json')\n  console.log(v)\n  process.exit()\n}\n\nif (help) {\n  const u = getUsage()\n  console.log(u)\n  process.exit()\n}\n\n// if (domain) {\n//   const u = getUsage()\n//   console.log(u)\n//   console.log()\n//   process.exit(1)\n// }\n\nconst checkSingleWord = async (word, auth) => {\n  const domains = makeStartupyList(word)\n  console.log('Checking %s domains: %s', domains.length, domains.join(', '))\n  const res = await checkDomains({\n    ...auth,\n    domains,\n  })\n  reportFree(domains, res)\n}\n\nconst reportFree = (domains, freeDomains) => {\n  const [free, , total] = domains.reduce(([f, t, tt], dd) => {\n    const isFree = freeDomains.some(d => d == dd)\n\n    const it = isFree ? c(dd, 'green') : c(dd, 'red')\n\n    return [\n      isFree ? [...f, it] : f,\n      isFree ? t : [...t, it],\n      [...tt, it],\n    ]\n  }, [[], [], []])\n\n  const percent = (free.length / total.length) * 100\n\n  console.log('%s', total.join(', '))\n  console.log('%s% are free', percent)\n}\n\nconst printInfo = ({\n  Created,\n  Expired,\n  WhoisEnabled,\n  Nameservers,\n  EmailDetails,\n  DnsProps,\n}) => {\n  console.log('Created:\\t%s', Created)\n  console.log('Expires on:\\t%s', Expired)\n  console.log('Whois enabled:\\t%s', WhoisEnabled)\n  if (Nameservers) console.log('Nameservers:\\t%s', Nameservers.join(', '))\n  if (EmailDetails) console.log('Whois email:\\t%s', EmailDetails.ForwardedTo)\n  if (DnsProps) console.log('DNS:\\t\\t%s', c(DnsProps.ProviderType, DnsProps.ProviderType == 'FREE' ? 'red' : 'green'))\n}\n\nconst run = async () => {\n  const singleWord = isSingleWord(domain)\n  let phone\n  let user\n  try {\n    const Auth = await getConfig({\n      global: true,\n    })\n    const { aws_id, aws_key, phone: p } = await getPrivateConfig()\n    phone = p\n    user = Auth.ApiUser\n\n    if (info) {\n      const i = await getInfo(domain, Auth)\n      printInfo(i)\n      return\n    }\n\n    if (singleWord) {\n      await checkSingleWord(domain, Auth)\n      return\n    }\n\n    console.log('Checking domain %s', domain)\n    const res = await checkDomains({\n      ...Auth,\n      domain,\n    })\n    if (res.length) {\n      console.log('%s is free', c(domain, 'green'))\n    } else {\n      console.log('%s is taken', c(domain, 'red'))\n      if (info) {\n        console.log('fetching detail about the domain')\n      }\n    }\n  } catch ({ stack, message, props }) {\n    if (props) {\n      LOG(inspect(props, { colors: true }))\n      LOG(Errors[props.Number])\n    }\n\n    if (props && props.Number == '1011150') {\n      const authComplete = await handleRequestIP(message, { phone, user, head })\n      if (authComplete === true) {\n        await run()\n        // update the configuration to reflect the IP\n        // modify `africa` to be able to update the configuration\n      } else {\n        console.log(authComplete)\n      }\n      return\n    }\n\n    DEBUG ? LOG(stack) : console.error(message)\n    process.exit(1)\n  }\n}\n\nconst Errors = {\n  1011150: 'Parameter RequestIP is invalid',\n  2030166: 'Domain is invalid',\n}\n\n; (async () => {\n  if (init) {\n    await africa('expensive', questions, { force: true })\n    await africa('expensive-client', privateQuestions, { force: true })\n    return\n  }\n  await run()\n})()\n"],"file":"index.js"}