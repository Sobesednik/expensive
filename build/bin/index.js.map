{"version":3,"sources":["../../src/bin/index.js"],"names":["LOG","DEBUG","test","process","env","NODE_DEBUG","domain","argv","u","console","log","exit","checkSingleWord","word","auth","domains","length","join","res","reportFree","freeDomains","free","total","reduce","f","t","tt","dd","isFree","some","d","it","percent","singleWord","global","stack","message","props","colors","Errors","Number","answer","q","text","getDefault","trim","error"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n/* eslint-disable no-console */\nimport { c } from 'erte'\nimport { debuglog, inspect } from 'util'\nimport getUsage from './get-usage'\nimport { getConfig, checkDomains } from '..'\nimport { makeStartupyList, isSingleWord } from '../lib'\nimport authenticate from '../lib/authenticate'\nimport { askQuestions } from 'reloquent'\n\nconst LOG = debuglog('expensive')\nconst DEBUG = /expensive/.test(process.env.NODE_DEBUG)\n\nconst [,, domain] = process.argv\n\nif (!domain) {\n  const u = getUsage()\n  console.log(u)\n  console.log()\n  process.exit(1)\n}\n\nconst checkSingleWord = async (word, auth) => {\n  const domains = makeStartupyList(word)\n  console.log('Checking %s domains: %s', domains.length, domains.join(', '))\n  const res = await checkDomains({\n    ...auth,\n    domains,\n  })\n  reportFree(domains, res)\n}\n\nconst reportFree = (domains, freeDomains) => {\n  const [free,, total] = domains.reduce(([f, t, tt], dd) => {\n    const isFree = freeDomains.some(d => d == dd)\n\n    const it = isFree ? c(dd, 'green') : c(dd, 'red')\n\n    return [\n      isFree ? [...f, it] : f,\n      isFree ? t : [...t, it],\n      [...tt, it],\n    ]\n  }, [[], [], []])\n\n  const percent = (free.length / total.length) * 100\n\n  console.log('%s', total.join(', '))\n  console.log('%s% are free', percent)\n}\n\n(async () => {\n  const singleWord = isSingleWord(domain)\n\n  try {\n    const auth = await getConfig({\n      global: true,\n    })\n    if (singleWord) {\n      await checkSingleWord(domain, auth)\n      return\n    }\n\n    console.log('Checking domain %s', domain)\n    const res = await checkDomains({\n      ...auth,\n      domain,\n    })\n    if (res.length) {\n      console.log('%s is free', c(domain, 'green'))\n    } else {\n      console.log('%s is taken', c(domain, 'red'))\n    }\n  } catch ({ stack, message, props }) {\n    if (props) {\n      LOG(inspect(props, { colors: true }))\n      LOG(Errors[props.Number])\n    }\n\n    if (props && props.Number == '1011150') {\n      if (props.Number == '1011150') {\n        // attempt to authenticate\n        const answer = await askQuestions({\n          q: {\n            text: 'IP is not whitelisted. Authenticate and whitelist the IP (y/n)?',\n            async getDefault() {\n              return 'y'\n            },\n          },\n        }, null, 'q')\n        if (answer.trim() == 'y') {\n          console.log('ok will sing in')\n          const res = await authenticate()\n          debugger\n          return\n        }\n      }\n    }\n    DEBUG ? LOG(stack) : console.error(message)\n    process.exit(1)\n  }\n})()\n\nconst Errors = {\n  1011150: 'Parameter RequestIP is invalid',\n}\n"],"file":"index.js"}