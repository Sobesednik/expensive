{"version":3,"sources":["../src/index.js"],"names":["LOG","DOMAINS_CHECK","validateDomains","arr","reduce","acc","current","checkDomains","ApiUser","ApiKey","ClientIp","domains","domain","Array","isArray","Error","val","d","res","query","DomainList","join","re","e","results","exec","name","f","free","push","filter","m","map","auth","config","packageName","global","opts","p","questions","isXml","s","startsWith","Command","Options","cb","qs","querystring","stringify","UserName","url","xml","er","errors","r","trim","re1","e1","xmlProps","title","props","split","e2","prop","value","ero","length","t","transparentError"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,oBAAS,WAAT,CAAZ;AAEA,MAAMC,gBAAgB,yBAAtB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,kBAAmBC,GAAD,IAASA,IAAIC,MAAJ,CAAW,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAC5D,SAAOD,OAAO,OAAOC,OAAP,IAAkB,QAAhC;AACD,CAFgC,EAE9B,IAF8B,CAAjC;AAIA;;;;;;;;;;;;AAUO,MAAMC,eAAe,OAAO;AACjCC,SADiC;AAEjCC,QAFiC;AAGjCC,UAHiC;AAIjCC,YAAU,EAJuB;AAKjCC;AALiC,CAAP,KAMtB;AACJ,MAAI,CAACC,MAAMC,OAAN,CAAcH,OAAd,CAAL,EAA6B,MAAM,IAAII,KAAJ,CAAU,wBAAV,CAAN;AAC7B,QAAMC,MAAMd,gBAAgBS,OAAhB,CAAZ;AACA,MAAI,CAACK,GAAL,EAAU,MAAM,IAAID,KAAJ,CAAU,6BAAV,CAAN;AACV,MAAIH,UAAU,OAAOA,MAAP,IAAiB,QAA/B,EAAyC,MAAM,IAAIG,KAAJ,CAAU,yBAAV,CAAN;AACzC,QAAME,IAAI,CAAC,GAAGN,OAAJ,EAAa,IAAIC,SAAS,CAACA,MAAD,CAAT,GAAoB,EAAxB,CAAb,CAAV;AAEA,QAAMM,MAAM,MAAMC,MAAM;AACtBX,WADsB;AACbC,UADa;AACLC;AADK,GAAN,EAEfT,aAFe,EAEA;AAAEmB,gBAAYH,EAAEI,IAAF,CAAO,GAAP;AAAd,GAFA,CAAlB;AAIA,QAAMC,KAAK,6DAAX;AACA,MAAIC,CAAJ;AACA,QAAMC,UAAU,EAAhB;;AACA,SAAMD,IAAID,GAAGG,IAAH,CAAQP,GAAR,CAAV,EAAwB;AAAE;AACxB,UAAM,GAAGQ,IAAH,EAASC,CAAT,IAAcJ,CAApB;AACA,UAAMK,OAAOD,KAAK,MAAlB;AACAH,YAAQK,IAAR,CAAa;AAAEH,UAAF;AAAQE;AAAR,KAAb;AACD;;AACD,QAAMD,IAAIH,QAAQM,MAAR,CAAe,CAAC;AAAEF;AAAF,GAAD,KAAcA,IAA7B,CAAV;AACA,QAAMG,IAAIJ,EAAEK,GAAF,CAAM,CAAC;AAAEN;AAAF,GAAD,KAAcA,IAApB,CAAV;AACA,SAAOK,CAAP;AACD,CA5BM;AA8BP;;;;;;;;;;;;;;;;;;;AAeO,MAAME,OAAO,OAAOC,SAAS,EAAhB,KAAuB;AACzC,QAAM;AACJC,eADI;AACSC,aAAS,KADlB;AACyBC,WAAO;AADhC,MAEFH,MAFJ;AAGA,MAAI,CAACE,MAAD,IAAW,CAACD,WAAhB,EAA6B,MAAM,IAAIpB,KAAJ,CAAU,uEAAV,CAAN;AAC7B,QAAMuB,IAAIF,UAAU,CAACD,WAAX,GAAyB,WAAzB,GAAwC,GAAEA,WAAY,YAAhE;AACAnC,MAAI,mBAAJ,EAAyBsC,CAAzB;AACA,QAAM;AAAE9B,WAAF;AAAWC,UAAX;AAAmBC;AAAnB,MAAgC,MAAM,qBAAO4B,CAAP,EAAUC,kBAAV,EAAqBF,IAArB,CAA5C;AACA,SAAO;AAAE7B,WAAF;AAAWC,UAAX;AAAmBC;AAAnB,GAAP;AACD,CATM;AAWP;;;;;AACA,MAAM8B,QAAQC,KAAKA,EAAEC,UAAF,CAAa,wCAAb,CAAnB;;AAEA,MAAMvB,QAAQ,OAAO;AACnBX,SADmB;AAEnBC,QAFmB;AAGnBC;AAHmB,CAAP,EAIXiC,OAJW,EAIFC,UAAU,EAJR,KAIe;AAC3B,QAAMC,KAAK,qBAAO,IAAP,CAAX;AACA,MAAI,CAACF,OAAL,EAAc,MAAM,IAAI5B,KAAJ,CAAU,wBAAV,CAAN;;AACd,QAAM+B,KAAKC,qBAAYC,SAAZ,CAAsB;AAC/BxC,WAD+B;AAE/BC,UAF+B;AAG/BwC,cAAUzC,OAHqB;AAI/BE,YAJ+B;AAK/BiC,WAL+B;AAM/B,OAAGC;AAN4B,GAAtB,CAAX;;AAQA,QAAMM,MAAO,0CAAyCJ,EAAG,EAAzD;AACA9C,MAAIkD,GAAJ;AACA,QAAMhC,MAAM,MAAM,kBAAIgC,GAAJ,CAAlB;AACA,QAAMC,MAAMX,MAAMtB,GAAN,CAAZ;AACA,MAAI,CAACiC,GAAL,EAAU,MAAM,IAAIpC,KAAJ,CAAU,kBAAV,CAAN;AACV,QAAMO,KAAK,+BAAX;AACA,QAAMC,IAAID,GAAGG,IAAH,CAAQP,GAAR,CAAV;;AACA,MAAIK,CAAJ,EAAO;AACL,UAAM,GAAE,GAAG6B,EAAL,IAAW7B,CAAjB;AACA,UAAM8B,SAASD,GACZpB,GADY,CACRsB,KAAKA,EAAEC,IAAF,EADG,EAEZvB,GAFY,CAERsB,KAAK;AACR,YAAME,MAAM,4BAAZ;AACA,YAAMC,KAAKD,IAAI/B,IAAJ,CAAS6B,CAAT,CAAX;;AACA,UAAI,CAACG,EAAL,EAAS;AACPzD,YAAIyD,EAAJ;AACA,eAAQ,8BAA6BH,CAAE,EAAvC;AACD;;AACD,YAAM,GAAGI,QAAH,EAAaC,KAAb,IAAsBF,EAA5B;AACA,YAAMG,QAAQF,SAASH,IAAT,GAAgBM,KAAhB,CAAsB,GAAtB,EAA2BzD,MAA3B,CAAkC,CAACC,GAAD,EAAMiC,CAAN,KAAY;AAC1D,cAAMwB,KAAK,gBAAgBrC,IAAhB,CAAqBa,CAArB,CAAX;;AACA,YAAI,CAACwB,EAAL,EAAS;AACP9D,cAAI8D,EAAJ;AACA,iBAAO,8BAAP;AACD;;AACD,cAAM,GAAGC,IAAH,EAASC,KAAT,IAAkBF,EAAxB;AACA,cAAM7C,IAAI;AAAE,WAAC8C,IAAD,GAAQC;AAAV,SAAV;AACA,eAAO,EAAE,GAAG3D,GAAL;AAAU,aAAGY;AAAb,SAAP;AACD,OATa,EASX,EATW,CAAd;AAUA,aAAO;AAAE0C,aAAF;AAASC;AAAT,OAAP;AACD,KArBY,CAAf;AAsBA,QAAIK,GAAJ;;AACA,QAAIZ,OAAOa,MAAP,IAAiB,CAArB,EAAwB;AACtB,YAAM,CAAC;AAAEP,aAAF;AAASC;AAAT,OAAD,IAAqBP,MAA3B;AACAY,YAAM,IAAIlD,KAAJ,CAAU4C,KAAV,CAAN;AACAM,UAAIL,KAAJ,GAAYA,KAAZ;AACD,KAJD,MAIO;AACL,YAAMO,IAAId,OAAOrB,GAAP,CAAW,CAAC;AAAE2B;AAAF,OAAD,KAAeA,KAA1B,EAAiCtC,IAAjC,CAAsC,IAAtC,CAAV;AACA4C,YAAM,IAAIlD,KAAJ,CAAUoD,CAAV,CAAN;AACAF,UAAIL,KAAJ,GAAYP,OAAOrB,GAAP,CAAW,CAAC;AAAE4B;AAAF,OAAD,KAAeA,KAA1B,CAAZ;AACD;;AACD,UAAMQ,mBAAmBvB,GAAGoB,GAAH,CAAzB;AACA,UAAMG,gBAAN;AACD;;AACD,SAAOlD,GAAP;AACD,CA5DD","sourcesContent":["import africa from 'africa'\nimport rqt from 'rqt'\nimport erotic from 'erotic'\nimport querystring from 'querystring'\nimport questions from './questions'\nimport { debuglog } from 'util'\n\nconst LOG = debuglog('expensive')\n\nconst DOMAINS_CHECK = 'namecheap.domains.check'\n// /**\n//  * This is the main package file.\n//  */\n// export default async function expensive(Command = DOMAINS_CHECK, args = {\n//   DomainList: 'random.co',\n// }) {\n//   console.log('expensive called')\n//   const qs = querystring.stringify({\n//   })\n//   const url = `https://api.namecheap.com/xml.response?${qs}`\n//   console.log(url)\n//   const res = await rqt(url)\n//   console.log(res)\n// }\n\nconst validateDomains = (arr) => arr.reduce((acc, current) => {\n  return acc && typeof current == 'string'\n}, true)\n\n/**\n * @typedef {Object} Config\n * @property {string} ApiUser username\n * @property {string} ApiKey api key from the tools\n * @property {string} ClientIp white-listed client ip\n * @property {string[]} [domains] a list of domains to check\n * @property {string} domain a single domain to check\n *\n * @param {Config} param0 config\n */\nexport const checkDomains = async ({\n  ApiUser,\n  ApiKey,\n  ClientIp,\n  domains = [],\n  domain,\n}) => {\n  if (!Array.isArray(domains)) throw new Error('domains must be a list')\n  const val = validateDomains(domains)\n  if (!val) throw new Error('all domains must be strings')\n  if (domain && typeof domain != 'string') throw new Error('domain must be a string')\n  const d = [...domains, ...(domain ? [domain] : [])]\n\n  const res = await query({\n    ApiUser, ApiKey, ClientIp,\n  }, DOMAINS_CHECK, { DomainList: d.join(',') })\n\n  const re = /DomainCheckResult Domain=\"(.+?)\" Available=\"(true|false)\"/gm\n  let e\n  const results = []\n  while(e = re.exec(res)) { // eslint-disable-line\n    const [, name, f] = e\n    const free = f == 'true'\n    results.push({ name, free })\n  }\n  const f = results.filter(({ free }) => free)\n  const m = f.map(({ name }) => name)\n  return m\n}\n\n/**\n * @typedef {Object} AfricaOpts\n * @property {function} [rcNameFunction] a function which returns the name of the rc file to store data in, e.g., packageName => `.${packageName}rc`,\n * @property {string} [homedir] where to store the rc file.\n * @property {boolean} [force=false] force asking questions again to update the config\n *\n *\n * An authentication function which will read the package's rc file, or the global expensive rc file.\n * @typedef {Object} AuthConfig\n * @property {string} [packageName] name of the package which implements the expensive API. The `.packagename-expensive.rc` file will be created in the home directory.\n * @property {boolean} [global=false] Whether to use the global expensive config.\n * @property {AfricaOpts} [opts] A configuration to pass to africa.\n *\n * @param {AuthConfig} config\n */\nexport const auth = async (config = {}) => {\n  const {\n    packageName, global = false, opts = {},\n  } = config\n  if (!global && !packageName) throw new Error('An implementing package name should be given if not using a global rc')\n  const p = global && !packageName ? 'expensive' : `${packageName}-expensive`\n  LOG('authenticating %s', p)\n  const { ApiUser, ApiKey, ClientIp } = await africa(p, questions, opts)\n  return { ApiUser, ApiKey, ClientIp }\n}\n\n/** @param {string} s */\nconst isXml = s => s.startsWith('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n\nconst query = async ({\n  ApiUser,\n  ApiKey,\n  ClientIp,\n}, Command, Options = {}) => {\n  const cb = erotic(true)\n  if (!Command) throw new Error('Command must be passed')\n  const qs = querystring.stringify({\n    ApiUser,\n    ApiKey,\n    UserName: ApiUser,\n    ClientIp,\n    Command,\n    ...Options,\n  })\n  const url = `https://api.namecheap.com/xml.response?${qs}`\n  LOG(url)\n  const res = await rqt(url)\n  const xml = isXml(res)\n  if (!xml) throw new Error('non-xml response')\n  const re = /<Errors>([\\s\\S.]+?)<\\/Errors>/\n  const e = re.exec(res)\n  if (e) {\n    const [,...er] = e\n    const errors = er\n      .map(r => r.trim())\n      .map(r => {\n        const re1 = /<Error(.*?)>(.+?)<\\/Error>/\n        const e1 = re1.exec(r)\n        if (!e1) {\n          LOG(e1)\n          return `Could not parse the error: ${r}`\n        }\n        const [, xmlProps, title] = e1\n        const props = xmlProps.trim().split(' ').reduce((acc, p) => {\n          const e2 = /(.+?)=\"(.+?)\"/.exec(p)\n          if (!e2) {\n            LOG(e2)\n            return 'could not parse the property'\n          }\n          const [, prop, value] = e2\n          const d = { [prop]: value }\n          return { ...acc, ...d }\n        }, {})\n        return { title, props }\n      })\n    let ero\n    if (errors.length == 1) {\n      const [{ title, props }] = errors\n      ero = new Error(title)\n      ero.props = props\n    } else {\n      const t = errors.map(({ title }) => title).join('; ')\n      ero = new Error(t)\n      ero.props = errors.map(({ props }) => props)\n    }\n    const transparentError = cb(ero)\n    throw transparentError\n  }\n  return res\n}\n"],"file":"index.js"}