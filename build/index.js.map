{"version":3,"sources":["../src/index.js"],"names":["LOG","DOMAINS_CHECK","validateDomains","arr","reduce","acc","current","checkDomains","ApiUser","ApiKey","ClientIp","domains","domain","Array","isArray","Error","val","d","qs","querystring","stringify","UserName","Command","DomainList","join","url","res","auth","config","packageName","global","opts","p","questions"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,oBAAS,WAAT,CAAZ;AAEA,MAAMC,gBAAgB,yBAAtB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,kBAAmBC,GAAD,IAASA,IAAIC,MAAJ,CAAW,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAC5D,SAAOD,OAAO,OAAOC,OAAP,IAAkB,QAAhC;AACD,CAFgC,EAE9B,IAF8B,CAAjC;AAIA;;;;;;;;;;;;AAUO,MAAMC,eAAe,OAAM;AAChCC,SADgC;AAEhCC,QAFgC;AAGhCC,UAHgC;AAIhCC,YAAU,EAJsB;AAKhCC;AALgC,CAAN,KAMtB;AACJ,MAAI,CAACC,MAAMC,OAAN,CAAcH,OAAd,CAAL,EAA6B,MAAM,IAAII,KAAJ,CAAU,wBAAV,CAAN;AAC7B,QAAMC,MAAMd,gBAAgBS,OAAhB,CAAZ;AACA,MAAI,CAACK,GAAL,EAAU,MAAM,IAAID,KAAJ,CAAU,6BAAV,CAAN;AACV,MAAIH,UAAU,OAAOA,MAAP,IAAiB,QAA/B,EAAyC,MAAM,IAAIG,KAAJ,CAAU,yBAAV,CAAN;AACzC,QAAME,IAAI,CAAC,GAAGN,OAAJ,EAAa,IAAIC,SAAS,CAACA,MAAD,CAAT,GAAoB,EAAxB,CAAb,CAAV,CALI,CAMJ;;AACA,QAAMM,KAAKC,qBAAYC,SAAZ,CAAsB;AAC/BZ,WAD+B;AAE/BC,UAF+B;AAG/BC,YAH+B;AAI/BW,cAAUb,OAJqB;AAK/Bc,aAASrB,aALsB;AAM/BsB,gBAAYN,EAAEO,IAAF,CAAO,GAAP;AANmB,GAAtB,CAAX;;AAQA,QAAMC,MAAO,0CAAyCP,EAAG,EAAzD;AACAlB,MAAIyB,GAAJ;AACA,QAAMC,MAAM,MAAM,kBAAID,GAAJ,CAAlB;AACA,SAAOC,GAAP;AACD,CAzBM;AA2BP;;;;;;;;;;;;;;;;;;AAcO,MAAMC,OAAO,OAAOC,SAAS,EAAhB,KAAuB;AACzC,QAAM;AACJC,eADI;AACSC,aAAS,KADlB;AACyBC,WAAO;AADhC,MAEFH,MAFJ;AAGA,MAAI,CAACE,MAAD,IAAW,CAACD,WAAhB,EAA6B,MAAM,IAAId,KAAJ,CAAU,uEAAV,CAAN;AAC7B,QAAMiB,IAAIF,SAAS,WAAT,GAAwB,GAAED,WAAY,YAAhD;AACA7B,MAAI,mBAAJ,EAAyBgC,CAAzB;AACA,QAAM;AAAExB,WAAF;AAAWC,UAAX;AAAmBC;AAAnB,MAAgC,MAAM,qBAAOsB,CAAP,EAAUC,kBAAV,EAAqBF,IAArB,CAA5C;AACA,SAAO;AAAEvB,WAAF;AAAWC,UAAX;AAAmBC;AAAnB,GAAP;AACD,CATM","sourcesContent":["import africa from 'africa'\nimport rqt from 'rqt'\nimport querystring from 'querystring'\nimport { debuglog } from 'util'\nimport questions from './questions'\n\nconst LOG = debuglog('expensive')\n\nconst DOMAINS_CHECK = 'namecheap.domains.check'\n// /**\n//  * This is the main package file.\n//  */\n// export default async function expensive(Command = DOMAINS_CHECK, args = {\n//   DomainList: 'random.co',\n// }) {\n//   console.log('expensive called')\n//   const qs = querystring.stringify({\n//   })\n//   const url = `https://api.namecheap.com/xml.response?${qs}`\n//   console.log(url)\n//   const res = await rqt(url)\n//   console.log(res)\n// }\n\nconst validateDomains = (arr) => arr.reduce((acc, current) => {\n  return acc && typeof current == 'string'\n}, true)\n\n/**\n * @typedef {Object} Config\n * @property {string} ApiUser username\n * @property {string} ApiKey api key from the tools\n * @property {string} ClientIp white-listed client ip\n * @property {string[]} [domains] a list of domains to check\n * @property {string} domain a single domain to check\n *\n * @param {Config} param0 config\n */\nexport const checkDomains = async({\n  ApiUser,\n  ApiKey,\n  ClientIp,\n  domains = [],\n  domain,\n}) => {\n  if (!Array.isArray(domains)) throw new Error('domains must be a list')\n  const val = validateDomains(domains)\n  if (!val) throw new Error('all domains must be strings')\n  if (domain && typeof domain != 'string') throw new Error('domain must be a string')\n  const d = [...domains, ...(domain ? [domain] : [])]\n  // const d = Array.isArray(domains) ? domains : [domain]\n  const qs = querystring.stringify({\n    ApiUser,\n    ApiKey,\n    ClientIp,\n    UserName: ApiUser,\n    Command: DOMAINS_CHECK,\n    DomainList: d.join(','),\n  })\n  const url = `https://api.namecheap.com/xml.response?${qs}`\n  LOG(url)\n  const res = await rqt(url)\n  return res\n}\n\n/**\n * @typedef {Object} AfricaOpts\n * @property {function} [rcNameFunction] a function which returns the name of the rc file to store data in, e.g., packageName => `.${packageName}rc`,\n * @property {string} [homedir] where to store the rc file.\n *\n *\n * An authentication function which will read the package's rc file, or the global expensive rc file.\n * @typedef {Object} AuthConfig\n * @property {string} [packageName] name of the package which implements the expensive API. The `.packagename-expensive.rc` file will be created in the home directory.\n * @property {boolean} [global=false] Whether to use the global expensive config.\n * @property {AfricaOpts} [opts] A configuration to pass to africa.\n *\n * @param {AuthConfig} config\n */\nexport const auth = async (config = {}) => {\n  const {\n    packageName, global = false, opts = {},\n  } = config\n  if (!global && !packageName) throw new Error('An implementing package name should be given if not using a global rc')\n  const p = global ? 'expensive' : `${packageName}-expensive`\n  LOG('authenticating %s', p)\n  const { ApiUser, ApiKey, ClientIp } = await africa(p, questions, opts)\n  return { ApiUser, ApiKey, ClientIp }\n}\n"],"file":"index.js"}