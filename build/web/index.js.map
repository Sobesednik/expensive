{"version":3,"sources":["../../src/web/index.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// const run = async () => {\n//   let phone\n//   let user\n//   try {\n//     const Auth = await getConfig({\n//       global: !SANDBOX,\n//       packageName: SANDBOX ? 'sandbox' : null,\n//     })\n//     const { aws_id, aws_key, phone: p } = await getPrivateConfig()\n//     phone = p\n//     user = Auth.ApiUser\n\n//     if (whitelistIP) {\n//       const err = new Error()\n//       err.props = {\n//         Number: 1011150,\n//       }\n//       LOG('waiting for ip...')\n//       const ip = await rqt('https://api.ipify.org') //  '127.0.0.1' //\n//       err.message = `Invalid request IP: ${ip}`\n//       throw err\n//     }\n\n//     const nc = new Namecheap(Auth)\n\n//     if (!domains) {\n//       await List(nc, { sort, desc, filter, type, pageSize })\n//       return\n//     }\n\n//     const [domain] = domains\n\n//     if (info) {\n//       const i = await nc.domains.getInfo({ domain })\n//       printInfo(i)\n//       return\n//     }\n\n//     if (register) {\n//       await Register(nc, { domain })\n//       return\n//     }\n\n//     await Check(nc, {\n//       domains,\n//       zones,\n//       free,\n//     })\n//   } catch ({ stack, message, props }) {\n//     if (props) {\n//       LOG(inspect(props, { colors: true }))\n//       LOG(Errors[props.Number])\n//     }\n\n\n\n//     DEBUG ? LOG(stack) : console.error(message)\n//     process.exit(1)\n//   }\n// }\n\n// ; (async () => {\n//   if (init) {\n//     await initConfig()\n//     return\n//   }\n//   await run()\n// })()\n"],"file":"index.js"}