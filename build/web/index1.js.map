{"version":3,"sources":["../../src/web/index1.js"],"names":["LOG","DEBUG","test","process","env","NODE_DEBUG","SANDBOX","domains","help","init","version","head","info","sort","desc","filter","type","pageSize","register","free","zones","whitelistIP","command","multiple","short","boolean","v","require","console","log","exit","u","run","phone","user","Auth","global","packageName","aws_id","aws_key","p","ApiUser","err","Error","props","Number","ip","message","nc","Namecheap","domain","i","getInfo","stack","colors","Errors","authComplete","skipPhoneAuth","error","getAppName","e","initConfig","name","questions","force","client","privateQuestions"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n/* eslint-disable no-console */\nimport { debuglog, inspect } from 'util'\nimport argufy from 'argufy'\nimport africa from 'africa'\nimport getUsage from './get-usage'\nimport List from './list'\nimport Check from './check'\nimport Register from './reg'\nimport { getConfig } from '..'\nimport getPrivateConfig from '../lib/private-config'\nimport printInfo from '../lib/print/info'\nimport handleRequestIP from '../lib/authenticate/handle-request-ip'\nimport questions, { privateQuestions } from '../questions'\nimport Namecheap from '../Namecheap'\nimport rqt from 'rqt'\n\nconst LOG = debuglog('expensive')\nconst DEBUG = /expensive/.test(process.env.NODE_DEBUG)\nconst SANDBOX = !!process.env.SANDBOX\n\nconst {\n  domains,\n  help,\n  init,\n  version,\n  head,\n  info,\n  sort, // name, expire, create\n  desc,\n  filter,\n  type,\n  pageSize,\n  register,\n  free,\n  zones,\n  whitelistIP,\n} = argufy({\n  domains: {\n    command: true,\n    multiple: true,\n  },\n  version: {\n    short: 'v',\n    boolean: true,\n  },\n  help: { short: 'h', boolean: true },\n  init: { short: 'I', boolean: true },\n  head: { short: 'H', boolean: true },\n  info: { short: 'i', boolean: true },\n  // <INFO>\n  sort: 's', // add validation to argufy\n  desc: { short: 'd', boolean: true },\n  filter: { short: 'f' },\n  pageSize: { short: 'p' },\n  type: 't', // add description to argufy, so that usage can be passed to usually\n  // </INFO>\n  register: { short: 'r', boolean: true },\n  free: { short: 'f', boolean: true },\n  zones: 'z',\n  whitelistIP: { short: 'W', boolean: true },\n})\n\nif (version) {\n  const { version: v } = require('../../package.json')\n  console.log(v)\n  process.exit()\n}\n\nif (help) {\n  const u = getUsage()\n  console.log(u)\n  process.exit()\n}\n\nconst run = async () => {\n  let phone\n  let user\n  try {\n    const Auth = await getConfig({\n      global: !SANDBOX,\n      packageName: SANDBOX ? 'sandbox' : null,\n    })\n    const { aws_id, aws_key, phone: p } = await getPrivateConfig()\n    phone = p\n    user = Auth.ApiUser\n\n    if (whitelistIP) {\n      const err = new Error()\n      err.props = {\n        Number: 1011150,\n      }\n      LOG('waiting for ip...')\n      const ip = await rqt('https://api.ipify.org') //  '127.0.0.1' //\n      err.message = `Invalid request IP: ${ip}`\n      throw err\n    }\n\n    const nc = new Namecheap(Auth)\n\n    if (!domains) {\n      await List(nc, { sort, desc, filter, type, pageSize })\n      return\n    }\n\n    const [domain] = domains\n\n    if (info) {\n      const i = await nc.domains.getInfo({ domain })\n      printInfo(i)\n      return\n    }\n\n    if (register) {\n      await Register(nc, { domain })\n      return\n    }\n\n    await Check(nc, {\n      domains,\n      zones,\n      free,\n    })\n  } catch ({ stack, message, props }) {\n    if (props) {\n      LOG(inspect(props, { colors: true }))\n      LOG(Errors[props.Number])\n    }\n\n    if (props && props.Number == 1011150) {\n      const authComplete = await handleRequestIP(message, { phone, user, head, skipPhoneAuth: SANDBOX })\n      if (authComplete === true) {\n        await run()\n        // update the configuration to reflect the IP\n        // modify `africa` to be able to update the configuration\n      } else {\n        console.log(authComplete)\n      }\n      return\n    }\n\n    DEBUG ? LOG(stack) : console.error(message)\n    process.exit(1)\n  }\n}\n\nconst Errors = {\n  1011150: 'Parameter RequestIP is invalid',\n  2030166: 'Domain is invalid',\n}\n\nconst getAppName = () => {\n  const e = `${process.env.SANDBOX ? 'sandbox-' : ''}expensive`\n  return e\n}\n\nconst initConfig = async () => {\n  const name = getAppName()\n  const Auth = await africa(name, questions, { force: true })\n  const client = await africa(`${name}-client`, privateQuestions, { force: true })\n  return {\n    Auth,\n    client,\n  }\n}\n\n; (async () => {\n  if (init) {\n    await initConfig()\n    return\n  }\n  await run()\n})()\n"],"file":"index1.js"}