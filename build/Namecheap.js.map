{"version":3,"sources":["../src/Namecheap.js"],"names":["Namecheap","constructor","Auth","Error","users","address","getList","conf","res","getInfo","domains","create","check","DomainInfo","AddressDetail"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEe,MAAMA,SAAN,CAAgB;AAC7B;;;;AAIAC,cAAYC,IAAZ,EAAkB;AAChB,QAAI,CAACA,IAAL,EAAW,MAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACX,SAAKD,IAAL,GAAYA,IAAZ;AACD;;AACD,MAAIE,KAAJ,GAAY;AACV,WAAO;AACLC,eAAS;AACP;;;;;;;AAOAC,iBAAS,MAAOC,IAAP,IAAgB;AACvB,gBAAMC,MAAM,MAAM,uBAAe,KAAKN,IAApB,EAA0BK,IAA1B,CAAlB;AACA,iBAAOC,GAAP;AACD,SAXM;;AAYP;;;;;;;;;;AAUAC,iBAAS,MAAOF,IAAP,IAAgB;AACvB,gBAAMC,MAAM,MAAM,uBAAe,KAAKN,IAApB,EAA0BK,IAA1B,CAAlB;AACA,iBAAOC,GAAP;AACD;AAzBM;AADJ,KAAP;AA6BD,GAvC4B,CAwC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIE,OAAJ,GAAc;AACZ,WAAO;AACL;;;;;;;AAOAC,cAAQ,MAAOJ,IAAP,IAAgB;AACtB,cAAMC,MAAM,MAAM,qBAAO,KAAKN,IAAZ,EAAkBK,IAAlB,CAAlB;AACA,eAAOC,GAAP;AACD,OAXI;;AAaL;;;;;;;;;;AAUAI,aAAO,MAAOL,IAAP,IAAgB;AACrB,cAAMC,MAAM,MAAM,oBAAM,KAAKN,IAAX,EAAiBK,IAAjB,CAAlB;AACA,eAAOC,GAAP;AACD,OA1BI;;AA2BL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDAF,eAAS,OAAOC,OAAO,EAAd,KAAqB;AAC5B,cAAMC,MAAM,MAAM,sBAAe,KAAKN,IAApB,EAA0BK,IAA1B,CAAlB;AACA,eAAOC,GAAP;AACD,OApFI;;AAqFL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDAC,eAAS,OAAOF,OAAO,EAAd,KAAqB;AAC5B,cAAMC,MAAM,MAAM,sBAAc,KAAKN,IAAnB,EAAyBK,IAAzB,CAAlB;AACA,eAAOC,GAAP;AACD;AA1II,KAAP;AA4ID;;AApM4B,C,CAuM/B;AACA;;AAEA;;;;AACO,MAAMK,aAAa,EAAnB;AACP;;;AACO,MAAMC,gBAAgB,EAAtB;AAEP;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwEA","sourcesContent":["import check from './lib/namecheap/domains/check'\nimport create from './lib/namecheap/domains/create'\nimport getDomainsList from './lib/namecheap/domains/get-list'\nimport getDomainInfo from './lib/namecheap/domains/get-info'\nimport getAddressList from './lib/namecheap/users/address/get-list'\nimport getAddressInfo from './lib/namecheap/users/address/get-info'\n\nexport default class Namecheap {\n  /**\n   * Create an instance of a Namecheap client.\n   * @param {Auth} Auth Authentication object.\n   */\n  constructor(Auth) {\n    if (!Auth) throw new Error('Authentication object expected')\n    this.Auth = Auth\n  }\n  get users() {\n    return {\n      address: {\n        /**\n         * Gets a list of address IDs and address names associated with the user account.\n         * @returns {Promise.<Address[]>} An array with addresses.\n         * @example\n         *\n         * await nc.users.address.getList()\n         */\n        getList: async (conf) => {\n          const res = await getAddressList(this.Auth, conf)\n          return res\n        },\n        /**\n         * Gets information for the requested address ID.\n         * @param {users.address.getInfo} conf Configuration parameters.\n         * @param {number} conf.id ID of the address.\n         * @returns {Promise.<AddressDetail>} Full information about the address.\n         * @example\n         *\n         * await nc.users.address.getInfo({ id: 335544 })\n         *\n         */\n        getInfo: async (conf) => {\n          const res = await getAddressInfo(this.Auth, conf)\n          return res\n        },\n      },\n    }\n  }\n  // get whoisguard() {\n  //   return {\n  //     /**\n  //      * Allots WhoisGuard privacy protection to a domain.\n  //      * @param {whoisguard.allot} conf Configuration parameters.\n  //      * @param {string} conf.domain A domain name to register.\n  //      * @param {AddressDetail} conf.address An address to use for all fields.\n  //      * @returns {Promise.<RegistrationResult>} Result of the domain registration process.\n  //      */\n  //     allot: async (conf) => {\n  //       const res = await allot(this.Auth, conf)\n  //       return res\n  //     },\n  //   }\n  // }\n  get domains() {\n    return {\n      /**\n       * Registers a new domain.\n       * @param {domains.create} conf Configuration parameters.\n       * @param {string} conf.domain A domain name to register.\n       * @param {AddressDetail} conf.address An address to use for all fields.\n       * @returns {Promise.<RegistrationResult>} Result of the domain registration process.\n       */\n      create: async (conf) => {\n        const res = await create(this.Auth, conf)\n        return res\n      },\n\n      /**\n       * Checks the availability of domains.\n       * @param {domains.check} conf Configuration parameters.\n       * @param {string} [conf.domain] A single domain to check.\n       * @param {string[]} [conf.domains] An array of domains to check.\n       * @returns {Promise.<DomainCheck[]>} An array with information about checked domains.\n       * @example\n       *\n       * await nc.domains.check({ domain: 'test.co' })\n       */\n      check: async (conf) => {\n        const res = await check(this.Auth, conf)\n        return res\n      },\n      /**\n       * Returns a list of domains for the particular user.\n       * @param {domains.getList} [conf] Configuration parameters.\n       * @param {('create'|'expire'|'name')} [conf.sort] How to sort the results. Defaults to expiry date.\n       * @param {boolean} [conf.desc] Whether to display in descending order when using a sort.\n       * @param {number} [conf.page] Page to return.\n       * @param {string} [conf.filter] Search term to filter results by.\n       * @param {('all'|'expiring'|'expired')} [conf.type] What domains to show.\n       * @param {number} [conf.pageSize] Number of domains to be listed on a page. Minimum value is *10*, and maximum value is *100*. Default value is *20*.\n       * @returns {Promise.<{domains: DomainListInfo[], TotalItems: number, CurrentPage: number, PageSize: number}>} Domains with paging information.\n       * @example\n       *\n       * // Get information about domains in the `.app` zone sorted by descending create date (oldest first)\n       * await nc.domains.getList({\n       *  sort: 'create',\n       *  desc: true,\n       *  filter: '.app',\n       * })\n       *\n       * // Result:\n       * {\n       *  domains: [\n       *    {\n       *      ID: 30071047,\n       *      Name: 'example.app',\n       *      User: 'artdeco',\n       *      Created: '06/05/2018',\n       *      Expires: '06/05/2019',\n       *      IsExpired: false,\n       *      IsLocked: false,\n       *      AutoRenew: true,\n       *      WhoisGuard: 'ENABLED',\n       *      IsPremium: false,\n       *      IsOurDNS: false\n       *    },\n       *    {\n       *      ID: 30072635,\n       *      Name: 'test.app',\n       *      User: 'artdeco',\n       *      Created: '06/06/2018',\n       *      Expires: '06/06/2019',\n       *      IsExpired: false,\n       *      IsLocked: false,\n       *      AutoRenew: true,\n       *      WhoisGuard: 'ENABLED',\n       *      IsPremium: false,\n       *      IsOurDNS: false\n       *    },\n       *  ],\n       *  TotalItems: 46,\n       *  CurrentPage: 1,\n       *  PageSize: 20,\n       * }\n       */\n      getList: async (conf = {}) => {\n        const res = await getDomainsList(this.Auth, conf)\n        return res\n      },\n      /**\n       * Returns information about the requested domain.\n       * @param {domains.getInfo} conf Configuration parameters.\n       * @param {string} conf.domain Domain name to get information for.\n       * @returns {Promise.<DomainInfo>} An information about the domain.\n       * @example\n       *\n       * // Obtain information for the testt.cc domain:\n       * await nc.domains.getInfo({ domain: 'testt.cc' })\n       *\n       * // Result:\n       * { Status: 'Ok',\n       *  ID: 30072635,\n       *  DomainName: 'testt.cc',\n       *  OwnerName: 'artdeco',\n       *  IsOwner: true,\n       *  IsPremium: false,\n       *  DomainDetails:\n       *   { CreatedDate: '06/06/2018',\n       *     ExpiredDate: '06/06/2019',\n       *     NumYears: 0 },\n       *  Whoisguard:\n       *   { Enabled: 'True',\n       *     ID: 23996873,\n       *     ExpiredDate: '06/05/2019',\n       *     EmailDetails:\n       *      { WhoisGuardEmail: 'ff474db8ad3b4c3b95a2b0f3b3a73acc.protect[at]whoisguard.com',\n       *        ForwardedTo: 'anton[at]adc.sh',\n       *        LastAutoEmailChangeDate: '',\n       *        AutoEmailChangeFrequencyDays: 0 } },\n       *  PremiumDnsSubscription:\n       *   { UseAutoRenew: false,\n       *     SubscriptionId: -1,\n       *     CreatedDate: 0001-01-01T00:00:00.000Z,\n       *     ExpirationDate: 0001-01-01T00:00:00.000Z,\n       *     IsActive: false },\n       *  DnsDetails:\n       *   { ProviderType: 'CUSTOM',\n       *     IsUsingOurDNS: false,\n       *     HostCount: 2,\n       *     EmailType: 'FWD',\n       *     DynamicDNSStatus: false,\n       *     IsFailover: false,\n       *     Nameserver:\n       *      [ 'ns-1013.awsdns-62.net',\n       *        'ns-1311.awsdns-35.org',\n       *        'ns-1616.awsdns-10.co.uk',\n       *        'ns-355.awsdns-44.com' ] },\n       *  Modificationrights: { All: true } }\n       */\n      getInfo: async (conf = {}) => {\n        const res = await getDomainInfo(this.Auth, conf)\n        return res\n      },\n    }\n  }\n}\n\n// const nc = new Namecheap()\n// nc.domains.check\n\n/** @type {DomainInfo} */\nexport const DomainInfo = {}\n/** @type {AddressDetail} */\nexport const AddressDetail = {}\n\n/**\n * @typedef {Object} Auth\n * @property {string} ApiUser Username required to access the API.\n * @property {string} ApiKey Password required used to access the API.\n * @property {string} ClientIp IP address of the client accessing your application (End-user IP address).\n */\n\n/**\n * @typedef {Object} users.address.getInfo\n * @property {number} id ID of the address.\n *\n * @typedef {Object} domains.create\n * @property {string} domain A domain name to register.\n * @property {AddressDetail} address An address to use for all fields.\n *\n * @typedef {Object} domains.getInfo\n * @property {string} domain Domain name to get information for.\n *\n * @typedef {Object} domains.check\n * @property {string} domain A single domain to check.\n * @property {string[]} domains An array of domains to check.\n *\n * @typedef {Object} domains.getList\n * @property {('create'|'expire'|'name')} [sort] How to sort the results. Defaults to expiry date.\n * @property {boolean} [desc] Whether to display in descending order when using a sort.\n * @property {number} [page] Page to return.\n * @property {string} [filter] Search term to filter results by.\n * @property {('all'|'expiring'|'expired')} [type] What domains to show.\n * @property {number} [pageSize] Number of domains to be listed on a page. Minimum value is *10*, and maximum value is *100*. Default value is *20*.\n *\n * @typedef {Object} DomainListInfo\n * @property {boolean} AutoRenew\n * @property {string} Created\n * @property {string} Expires\n * @property {number} ID\n * @property {boolean} IsExpired\n * @property {boolean} IsLocked\n * @property {boolean} IsOurDNS\n * @property {boolean} IsPremium\n * @property {string} Name\n * @property {string} User\n * @property {string} WhoisGuard\n *\n * @typedef {Object} DomainCheck\n * @property {boolean} Available\n * @property {string} Description\n * @property {string} Domain\n * @property {number} EapFee\n * @property {number} ErrorNo\n * @property {number} IcannFee\n * @property {boolean} IsPremiumName\n * @property {number} PremiumRegistrationPrice\n * @property {number} PremiumRenewalPrice\n * @property {number} PremiumRestorePrice\n * @property {number} PremiumTransferPrice\n *\n * @typedef Address\n * @property {number} AddressID A unique integer value that represents the address profile.\n * @property {number} AddressName The name of the address profile.\n * @property {boolean} IsDefault Whether it is a default address.\n *\n * @typedef {Object} AddressDetail\n * @property {string} FirstName\n * @property {string} LastName\n * @property {string} JobTitle\n * @property {string} Organization\n * @property {string} Address1\n * @property {string} Address2\n * @property {string} City\n * @property {string} StateProvince\n * @property {string} StateProvinceChoice\n * @property {string} Zip\n * @property {string} Country\n * @property {string} Phone\n * @property {string} PhoneExt\n * @property {string} EmailAddress\n */\n\n\n/**\n * @typedef {Object} DomainInfo\n * @property {string} DomainName\n * @property {number} ID\n * @property {boolean} IsOwner\n * @property {boolean} IsPremium\n * @property {string} OwnerName\n * @property {string} Status\n * @property {DomainDetails} DomainDetails\n * @property {LockDetails} LockDetails\n * @property {Whoisguard} Whoisguard\n * @property {PremiumDnsSubscription} PremiumDnsSubscription\n * @property {DnsDetails} DnsDetails\n * @property {ModificationRights} ModificationRights\n *\n * @typedef {Object} LockDetails\n *\n * @typedef {Object} DomainDetails\n * @property {string} CreatedDate\n * @property {string} ExpiredDate\n * @property {number} NumYears\n *\n * @typedef {Object} DnsDetails\n * @property {('CUSTOM'|'FREE')} ProviderType\n * @property {boolean} IsUsingOurDNS\n * @property {number} HostCount\n * @property {string} EmailType\n * @property {boolean} DynamicDNSStatus\n * @property {boolean} IsFailover\n * @property {string[]} Nameserver\n *\n * @typedef {Object} PremiumDnsSubscription\n * @property {Date} CreatedDate\n * @property {Date} ExpirationDate\n * @property {boolean} IsActive\n * @property {number} SubscriptionId\n * @property {boolean} UseAutoRenew\n *\n * @typedef {Object} Whoisguard\n * @property {string} Enabled\n * @property {number} ID\n * @property {string} [ExpiredDate]\n * @property {EmailDetails} [EmailDetails]\n *\n * @typedef {Object} ModificationRights\n * @property {boolean} All\n * @property {boolean} [hosts]\n *\n * @typedef {Object} EmailDetails\n * @property {number} AutoEmailChangeFrequencyDays\n * @property {string} ForwardedTo\n * @property {string} LastAutoEmailChangeDate\n * @property {string} WhoisGuardEmail\n *\n * @typedef {Object} RegistrationResult\n * @property {string} ChargedAmount\n * @property {string} Domain\n * @property {boolean} FreePositiveSSL\n * @property {boolean} NonRealTimeDomain\n * @property {number} OrderID\n * @property {boolean} Registered\n * @property {number} TransactionID\n * @property {boolean} WhoisguardEnable\n */\n"],"file":"Namecheap.js"}