{"version":3,"sources":["../../../../src/lib/namecheap/domains/get-info.js"],"names":["COMMAND","parseWhois","Whoisguard","ID","ExpiredDate","EmailDetails","content","props","err","parseInt","parsePremiumDNS","dns","UseAutoRenew","SubscriptionId","CreatedDate","ExpirationDate","IsActive","Date","parse","res","DomainGetInfoResult","DomainDetails","NumYears","WhoisProps","whois","PremiumDnsSubscription","premiumDns","DnsDetails","DnsProps","Nameserver","map","Modificationrights","ModificationrightsProps","rights","reduce","acc","Type","d","getInfo","Auth","domain","DomainName"],"mappings":"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","sourcesContent":["import query from '../../query'\nimport { extractTag } from '../..'\n\nconst COMMAND = 'namecheap.domains.getinfo'\n\nconst parseWhois = (Whoisguard) => {\n  let ID\n  let ExpiredDate\n  let EmailDetails\n  ([{ content: ID }] = extractTag('ID', Whoisguard))\n  try {\n    ([{ props: EmailDetails }] = extractTag('EmailDetails', Whoisguard))\n  } catch (err) {\n    // ok\n  }\n  try {\n    ([{ content: ExpiredDate }] = extractTag('ExpiredDate', Whoisguard))\n  } catch (err) {\n    // ok\n  }\n  return {\n    ID: parseInt(ID, 10),\n    ...(ExpiredDate ? { ExpiredDate } : {}),\n    ...(EmailDetails ? { EmailDetails } : {}),\n  }\n}\n\nconst parsePremiumDNS = (dns) => {\n  const [{ content: UseAutoRenew }] = extractTag('UseAutoRenew', dns)\n  const [{ content: SubscriptionId }] = extractTag('SubscriptionId', dns)\n  const [{ content: CreatedDate }] = extractTag('CreatedDate', dns)\n  const [{ content: ExpirationDate }] = extractTag('ExpirationDate', dns)\n  const [{ content: IsActive }] = extractTag('IsActive', dns)\n  return {\n    UseAutoRenew: UseAutoRenew == 'true',\n    SubscriptionId: parseInt(SubscriptionId),\n    CreatedDate: new Date(Date.parse(CreatedDate)),\n    ExpirationDate: new Date(Date.parse(ExpirationDate)),\n    IsActive: IsActive == true,\n  }\n}\n\nexport const parse = (res) => {\n  const [{ content: DomainGetInfoResult, props }] = extractTag('DomainGetInfoResult', res)\n  const [{ content: DomainDetails }] = extractTag('DomainDetails', DomainGetInfoResult)\n  const [{ content: CreatedDate }] = extractTag('CreatedDate', DomainDetails)\n  const [{ content: ExpiredDate }] = extractTag('ExpiredDate', DomainDetails)\n  const [{ content: NumYears }] = extractTag('NumYears', DomainDetails)\n  const [{ content: Whoisguard, props: WhoisProps }] = extractTag('Whoisguard', DomainGetInfoResult)\n  const whois = parseWhois(Whoisguard)\n\n  const [{ content: PremiumDnsSubscription }] = extractTag('PremiumDnsSubscription', DomainGetInfoResult)\n  const premiumDns = parsePremiumDNS(PremiumDnsSubscription)\n\n  const [{ content: DnsDetails, props: DnsProps }] = extractTag('DnsDetails', DomainGetInfoResult)\n  const Nameserver = extractTag('Nameserver', DnsDetails).map(({ content }) => content)\n\n  const [{ content: Modificationrights, props: ModificationrightsProps }] = extractTag('Modificationrights', DomainGetInfoResult)\n  let rights = {}\n  if (Modificationrights) {\n    rights = extractTag('Rights', Modificationrights).reduce((acc, { props }) => {\n      const { Type } = props\n      return {\n        ...acc,\n        [Type]: true,\n      }\n    }, {})\n  }\n\n  const d = {\n    ...props,\n    DomainDetails: {\n      CreatedDate,\n      ExpiredDate,\n      NumYears: parseInt(NumYears),\n    },\n    Whoisguard: {\n      ...WhoisProps,\n      ...whois,\n    },\n    PremiumDnsSubscription: premiumDns,\n    DnsDetails: {\n      ...DnsProps,\n      Nameserver,\n    },\n    Modificationrights: {\n      ...ModificationrightsProps,\n      ...rights,\n    },\n  }\n  return d\n}\n\nexport default async function getInfo(Auth = {}, {\n  domain,\n}) {\n  const res = await query({\n    ...Auth,\n  }, COMMAND, { DomainName: domain })\n\n  const d = parse(res)\n  return d\n}\n"],"file":"get-info.js"}