{"version":3,"sources":["../../../../src/lib/namecheap/domains/get-list.js"],"names":["GET_INFO","execRes","re","s","res","exec","args","extractTag","tag","string","RegExp","r","t","length","p","c","item","props","split","filter","a","reduce","acc","current","key","val","v","replace","content","trim","push","getInfo","domain","Auth","DomainName"],"mappings":";;;;;;;AAAA;;;;AAEA,MAAMA,WAAW,2BAAjB;;AAEA,MAAMC,UAAU,CAACC,EAAD,EAAKC,CAAL,KAAW;AACzB,QAAMC,MAAMF,GAAGG,IAAH,CAAQF,CAAR,CAAZ;AACA,MAAI,CAACC,GAAL,EAAU,OAAOA,GAAP;AACV,QAAM,GAAG,GAAGE,IAAN,IAAcF,GAApB;AACA,SAAOE,IAAP;AACD,CALD;;AAOA,MAAMC,aAAa,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAClC,QAAMP,KAAK,IAAIQ,MAAJ,CAAY,IAAGF,GAAI,4BAA2BA,GAAI,KAAlD,EAAwD,GAAxD,CAAX;AACA,QAAMG,IAAI,EAAV;AAEA,MAAIC,CAAJ;;AACA,SAAO,CAACA,IAAIX,QAAQC,EAAR,EAAYO,MAAZ,CAAL,MAA8B,IAArC,EAA2C;AACzC,QAAI,CAACG,EAAEC,MAAP,EAAe;AACf,UAAM,CAACC,CAAD,EAAIC,IAAI,EAAR,IAAcH,CAApB;AACA,UAAMI,OAAO;AACXC,aAAOH,EAAEI,KAAF,CAAQ,GAAR,EAAaC,MAAb,CAAoBC,KAAKA,CAAzB,EAA4BC,MAA5B,CAAmC,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAC1D,cAAM,CAACC,GAAD,EAAMC,GAAN,IAAaF,QAAQL,KAAR,CAAc,GAAd,CAAnB;AACA,cAAMQ,IAAID,IAAIE,OAAJ,CAAY,IAAZ,EAAkB,EAAlB,EAAsBA,OAAtB,CAA8B,IAA9B,EAAoC,EAApC,CAAV;AACA,eAAO,EACL,GAAGL,GADE;AAEL,WAACE,GAAD,GAAOE;AAFF,SAAP;AAID,OAPM,EAOJ,EAPI,CADI;AASXE,eAASb,EAAEc,IAAF;AATE,KAAb;AAWAlB,MAAEmB,IAAF,CAAOd,IAAP;AACD;;AACD,SAAOL,CAAP;AACD,CAtBD;AAwBA;;;;;AAGA,MAAMoB,UAAU,OAAOC,MAAP,EAAeC,OAAO,EAAtB,KAA6B;AAC3C,QAAM7B,MAAM,MAAM,oBAAM,EACtB,GAAG6B;AADmB,GAAN,EAEfjC,QAFe,EAEL;AAAEkC,gBAAYF;AAAd,GAFK,CAAlB,CAD2C,CAK3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CApBD;;eAsBeD,O","sourcesContent":["import query from '../../../lib/query'\n\nconst GET_INFO = 'namecheap.domains.getinfo'\n\nconst execRes = (re, s) => {\n  const res = re.exec(s)\n  if (!res) return res\n  const [, ...args] = res\n  return args\n}\n\nconst extractTag = (tag, string) => {\n  const re = new RegExp(`<${tag}(.*?)/?>(?:([\\\\s\\\\S]+?)</${tag}>)?`, 'g')\n  const r = []\n\n  let t\n  while ((t = execRes(re, string)) !== null) {\n    if (!t.length) continue\n    const [p, c = ''] = t\n    const item = {\n      props: p.split(' ').filter(a => a).reduce((acc, current) => {\n        const [key, val] = current.split('=')\n        const v = val.replace(/^\"/, '').replace(/\"$/, '')\n        return {\n          ...acc,\n          [key]: v,\n        }\n      }, {}),\n      content: c.trim(),\n    }\n    r.push(item)\n  }\n  return r\n}\n\n/**\n * @param {string} domain a domain name to view info for.\n */\nconst getInfo = async (domain, Auth = {}) => {\n  const res = await query({\n    ...Auth,\n  }, GET_INFO, { DomainName: domain })\n\n  // const [{ content: DomainDetails }] = extractTag('DomainDetails', res)\n  // const [{ content: Created }] = extractTag('CreatedDate', DomainDetails)\n  // const [{ content: Expired }] = extractTag('ExpiredDate', DomainDetails)\n  // const [{ content: Whoisguard, props: WhoisProps } = {}] = extractTag('Whoisguard', res)\n  // const [{ props: EmailDetails }] = extractTag('EmailDetails', Whoisguard)\n  // const [{ content: DnsDetails, props: DnsProps }] = extractTag('DnsDetails', res)\n  // const Nameservers = extractTag('Nameserver', DnsDetails).map(({ content }) => content)\n  // return {\n  //   Created,\n  //   Expired,\n  //   WhoisEnabled: WhoisProps.Enabled,\n  //   Nameservers,\n  //   EmailDetails,\n  //   DnsProps,\n  // }\n}\n\nexport default getInfo\n"],"file":"get-list.js"}