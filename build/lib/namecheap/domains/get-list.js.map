{"version":3,"sources":["../../../../src/lib/namecheap/domains/get-list.js"],"names":["GET_LIST","m","name","expire","create","getSort","sort","desc","includes","toLowerCase","Error","s","toUpperCase","getList","Auth","page","filter","type","pageSize","res","Page","PageSize","SortBy","SearchTerm","ListType","Domain","domains","map","props","content","Paging","TotalItems","CurrentPage","parseInt"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,MAAMA,WAAW,2BAAjB;AAEA,MAAMC,IAAI;AACRC,QAAM,MADE;AAERC,UAAQ,YAFA;AAGRC,UAAQ;AAGV;;;;AANU,CAAV;;AASA,MAAMC,UAAU,CAACC,IAAD,EAAOC,IAAP,KAAgB;AAC9B,MAAI,CAAC,CAAC,MAAD,EAAS,QAAT,EAAmB,QAAnB,EAA6BC,QAA7B,CAAsCF,KAAKG,WAAL,EAAtC,CAAL,EAAgE;AAC9D,UAAM,IAAIC,KAAJ,CAAW,2BAA0BJ,IAAK,GAA1C,CAAN;AACD;;AACD,QAAMK,IAAIV,EAAEK,IAAF,EAAQM,WAAR,EAAV;AACA,MAAIL,IAAJ,EAAU,OAAQ,GAAEI,CAAE,OAAZ;AACV,SAAOA,CAAP;AACD,CAPD;;AASe,eAAeE,OAAf,CAAuBC,OAAO,EAA9B,EAAkC;AAC/CC,MAD+C;AAE/CT,MAF+C;AAG/CC,MAH+C;AAI/CS,QAJ+C;AAK/CC,MAL+C;AAM/CC;AAN+C,IAO7C,EAPW,EAOP;AACN,QAAMC,MAAM,MAAM,oBAAM,EACtB,GAAGL;AADmB,GAAN,EAEfd,QAFe,EAEL,EACX,IAAIe,OAAO;AAAEK,YAAML;AAAR,KAAP,GAAuB,EAA3B,CADW;AAEX,QAAIG,WAAW;AAAEG,gBAAUH;AAAZ,KAAX,GAAoC,EAAxC,CAFW;AAGX,QAAIZ,OAAO;AAAEgB,cAAQjB,QAAQC,IAAR,EAAcC,IAAd;AAAV,KAAP,GAAyC;AAAEe,cAAQjB,QAAQ,QAAR,EAAkB,MAAlB;AAAV,KAA7C,CAHW;AAIX,QAAIW,SAAS;AAAEO,kBAAYP;AAAd,KAAT,GAAkC,EAAtC,CAJW;AAKX,QAAIC,OAAO;AAAEO,gBAAUP;AAAZ,KAAP,GAA4B,EAAhC;AALW,GAFK,CAAlB;AASA,QAAMQ,SAAS,kBAAW,QAAX,EAAqBN,GAArB,CAAf;AACA,QAAMO,UAAUD,OAAOE,GAAP,CAAW,CAAC;AAAEC;AAAF,GAAD,KAAeA,KAA1B,CAAhB;AACA,QAAM,CAAC;AAAEC,aAASC;AAAX,GAAD,IAAwB,kBAAW,QAAX,EAAqBX,GAArB,CAA9B;AACA,QAAM,CAAC;AAAEU,aAASE;AAAX,GAAD,IAA4B,kBAAW,YAAX,EAAyBD,MAAzB,CAAlC;AACA,QAAM,CAAC;AAAED,aAASG;AAAX,GAAD,IAA6B,kBAAW,aAAX,EAA0BF,MAA1B,CAAnC;AACA,QAAM,CAAC;AAAED,aAASR;AAAX,GAAD,IAA0B,kBAAW,UAAX,EAAuBS,MAAvB,CAAhC;AACA,SAAO;AACLJ,WADK;AAELK,gBAAYE,SAASF,UAAT,EAAqB,EAArB,CAFP;AAGLC,iBAAaC,SAASD,WAAT,EAAsB,EAAtB,CAHR;AAILX,cAAUY,SAASZ,QAAT,EAAmB,EAAnB;AAJL,GAAP;AAMD","sourcesContent":["import query from '../../../lib/query'\nimport { extractTag } from '../..'\n\nconst GET_LIST = 'namecheap.domains.getList'\n\nconst m = {\n  name: 'name',\n  expire: 'expiredate',\n  create: 'createdate',\n}\n\n/**\n * @param {string} sort\n */\nconst getSort = (sort, desc) => {\n  if (!['name', 'expire', 'create'].includes(sort.toLowerCase())) {\n    throw new Error(`Unknown sort by option: ${sort}.`)\n  }\n  const s = m[sort].toUpperCase()\n  if (desc) return `${s}_DESC`\n  return s\n}\n\nexport default async function getList(Auth = {}, {\n  page,\n  sort,\n  desc,\n  filter,\n  type,\n  pageSize,\n} = {}) {\n  const res = await query({\n    ...Auth,\n  }, GET_LIST, {\n    ...(page ? { Page: page }: {}),\n    ...(pageSize ? { PageSize: pageSize } : {}),\n    ...(sort ? { SortBy: getSort(sort, desc) } : { SortBy: getSort('create', 'desc') }),\n    ...(filter ? { SearchTerm: filter } : {}),\n    ...(type ? { ListType: type } : {}),\n  })\n  const Domain = extractTag('Domain', res)\n  const domains = Domain.map(({ props }) => props)\n  const [{ content: Paging }] = extractTag('Paging', res)\n  const [{ content: TotalItems }] = extractTag('TotalItems', Paging)\n  const [{ content: CurrentPage }] = extractTag('CurrentPage', Paging)\n  const [{ content: PageSize }] = extractTag('PageSize', Paging)\n  return {\n    domains,\n    TotalItems: parseInt(TotalItems, 10),\n    CurrentPage: parseInt(CurrentPage, 10),\n    PageSize: parseInt(PageSize, 10),\n  }\n}\n"],"file":"get-list.js"}