{"version":3,"sources":["../../../../src/lib/namecheap/domains/check.js"],"names":["DOMAINS_CHECK","checkDomains","config","ApiUser","ApiKey","ClientIp","domains","domain","Array","isArray","Error","val","d","res","DomainList","join","re","e","results","exec","name","f","free","push","filter","m","map"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,MAAMA,gBAAgB,yBAAtB;AAEA;;;;;;;;;;;;AAWA,MAAMC,eAAe,MAAOC,MAAP,IAAkB;AACrC,QAAM;AACJC,WADI;AAEJC,UAFI;AAGJC,YAHI;AAIJC,cAAU,EAJN;AAKJC;AALI,MAMFL,MANJ;AAOA,MAAI,CAACM,MAAMC,OAAN,CAAcH,OAAd,CAAL,EAA6B,MAAM,IAAII,KAAJ,CAAU,wBAAV,CAAN;AAC7B,QAAMC,MAAM,0BAAgBL,OAAhB,CAAZ;AACA,MAAI,CAACK,GAAL,EAAU,MAAM,IAAID,KAAJ,CAAU,6BAAV,CAAN;AACV,MAAIH,UAAU,OAAOA,MAAP,IAAiB,QAA/B,EAAyC,MAAM,IAAIG,KAAJ,CAAU,yBAAV,CAAN;AACzC,QAAME,IAAI,CAAC,GAAGN,OAAJ,EAAa,IAAIC,SAAS,CAACA,MAAD,CAAT,GAAoB,EAAxB,CAAb,CAAV;AAGA,QAAMM,MAAM,MAAM,oBAAM;AACtBV,WADsB;AACbC,UADa;AACLC;AADK,GAAN,EAEfL,aAFe,EAEA;AAAEc,gBAAYF,EAAEG,IAAF,CAAO,GAAP;AAAd,GAFA,CAAlB;AAIA,QAAMC,KAAK,6DAAX;AACA,MAAIC,CAAJ;AACA,QAAMC,UAAU,EAAhB;;AACA,SAAMD,IAAID,GAAGG,IAAH,CAAQN,GAAR,CAAV,EAAwB;AAAE;AACxB,UAAM,GAAGO,IAAH,EAASC,CAAT,IAAcJ,CAApB;AACA,UAAMK,OAAOD,KAAK,MAAlB;AACAH,YAAQK,IAAR,CAAa;AAAEH,UAAF;AAAQE;AAAR,KAAb;AACD;;AACD,QAAMD,IAAIH,QAAQM,MAAR,CAAe,CAAC;AAAEF;AAAF,GAAD,KAAcA,IAA7B,CAAV;AACA,QAAMG,IAAIJ,EAAEK,GAAF,CAAM,CAAC;AAAEN;AAAF,GAAD,KAAcA,IAApB,CAAV;AACA,SAAOK,CAAP;AACD,CA9BD;;eAgCexB,Y","sourcesContent":["import { validateDomains } from '../../../lib'\nimport query from '../../../lib/query'\n\nconst DOMAINS_CHECK = 'namecheap.domains.check'\n\n/**\n * @typedef {Object} Config\n * @property {string} ApiUser username\n * @property {string} ApiKey api key from the tools\n * @property {string} ClientIp white-listed client ip\n * @property {string[]} [domains] a list of domains to check\n * @property {string} domain a single domain to check.\n *\n * @param {Config} config the configuration\n * @returns {string[]} an array with free domains\n */\nconst checkDomains = async (config) => {\n  const {\n    ApiUser,\n    ApiKey,\n    ClientIp,\n    domains = [],\n    domain,\n  } = config\n  if (!Array.isArray(domains)) throw new Error('domains must be a list')\n  const val = validateDomains(domains)\n  if (!val) throw new Error('all domains must be strings')\n  if (domain && typeof domain != 'string') throw new Error('domain must be a string')\n  const d = [...domains, ...(domain ? [domain] : [])]\n\n\n  const res = await query({\n    ApiUser, ApiKey, ClientIp,\n  }, DOMAINS_CHECK, { DomainList: d.join(',') })\n\n  const re = /DomainCheckResult Domain=\"(.+?)\" Available=\"(true|false)\"/gm\n  let e\n  const results = []\n  while(e = re.exec(res)) { // eslint-disable-line\n    const [, name, f] = e\n    const free = f == 'true'\n    results.push({ name, free })\n  }\n  const f = results.filter(({ free }) => free)\n  const m = f.map(({ name }) => name)\n  return m\n}\n\nexport default checkDomains\n"],"file":"check.js"}