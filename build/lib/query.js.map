{"version":3,"sources":["../../src/lib/query.js"],"names":["LOG","isXml","s","startsWith","query","ApiUser","ApiKey","ClientIp","Command","Options","cb","Error","qs","UserName","url","process","env","SANDBOX","res","xml","error","getError","content","CommandResponse","Errors","length","errors","c","p","props","map","join","er"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,oBAAS,WAAT,CAAZ;AAEA;;AACA,MAAMC,QAAQC,KAAKA,EAAEC,UAAF,CAAa,wCAAb,CAAnB;;AAEe,eAAeC,KAAf,CAAqB;AAClCC,SADkC;AAElCC,QAFkC;AAGlCC;AAHkC,CAArB,EAIZC,OAJY,EAIHC,UAAU,EAJP,EAIW;AACxB,QAAMC,KAAK,qBAAO,IAAP,CAAX;AACA,MAAI,CAACF,OAAL,EAAc,MAAM,IAAIG,KAAJ,CAAU,wBAAV,CAAN;AACd,QAAMC,KAAK,4BAAU;AACnBP,WADmB;AAEnBC,UAFmB;AAGnBO,cAAUR,OAHS;AAInBE,YAJmB;AAKnBC,WALmB;AAMnB,OAAGC;AANgB,GAAV,CAAX;AAQA,QAAMK,MAAO,eAAcC,QAAQC,GAAR,CAAYC,OAAZ,GAAsB,UAAtB,GAAmC,EAAG,8BAA6BL,EAAG,EAAjG;AACAZ,MAAIc,GAAJ;AACA,QAAMI,MAAM,MAAM,kBAAIJ,GAAJ,CAAlB;AACA,QAAMK,MAAMlB,MAAMiB,GAAN,CAAZ;AACA,MAAI,CAACC,GAAL,EAAU,MAAM,IAAIR,KAAJ,CAAU,kBAAV,CAAN;AAEV,QAAMS,QAAQC,SAASH,GAAT,CAAd;;AACA,MAAIE,KAAJ,EAAW;AACT,UAAMV,GAAGU,KAAH,CAAN;AACD;;AAED,QAAM,CAAC;AAAEE,aAASC;AAAX,GAAD,IAAiC,kBAAW,iBAAX,EAA8BL,GAA9B,CAAvC;AAEA,SAAOK,eAAP;AACD;;AAEM,MAAMF,WAAYH,GAAD,IAAS;AAC/B,QAAM,CAAC;AAAEI,aAASE;AAAX,GAAD,IAAwB,kBAAW,QAAX,EAAqBN,GAArB,CAA9B;;AACA,MAAIM,OAAOC,MAAX,EAAmB;AACjB,UAAMC,SAAS,kBAAW,OAAX,EAAoBF,MAApB,CAAf;AAEA,QAAIG,CAAJ;AACA,QAAIC,CAAJ;;AACA,QAAIF,OAAOD,MAAP,IAAiB,CAArB,EAAwB;AACtB,YAAM,CAAC;AAAEH,eAAF;AAAWO;AAAX,OAAD,IAAuBH,MAA7B;AACAC,UAAIL,OAAJ;AACAM,UAAIC,KAAJ;AACD,KAJD,MAIO;AACLF,UAAID,OAAOI,GAAP,CAAW,CAAC;AAAER;AAAF,OAAD,KAAiBA,OAA5B,EAAqCS,IAArC,CAA0C,IAA1C,CAAJ;AACAH,UAAIF,OAAOI,GAAP,CAAW,CAAC;AAAED;AAAF,OAAD,KAAeA,KAA1B,CAAJ;AACD;;AACD,UAAMG,KAAK,IAAIrB,KAAJ,CAAUgB,CAAV,CAAX;AACAK,OAAGH,KAAH,GAAWD,CAAX;AAEA,WAAOI,EAAP;AACD;AACF,CApBM","sourcesContent":["import rqt from 'rqt'\nimport { stringify } from 'querystring'\nimport { debuglog } from 'util'\nimport erotic from 'erotic'\nimport { extractTag } from '.'\n\nconst LOG = debuglog('expensive')\n\n/** @param {string} s */\nconst isXml = s => s.startsWith('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n\nexport default async function query({\n  ApiUser,\n  ApiKey,\n  ClientIp,\n}, Command, Options = {}) {\n  const cb = erotic(true)\n  if (!Command) throw new Error('Command must be passed')\n  const qs = stringify({\n    ApiUser,\n    ApiKey,\n    UserName: ApiUser,\n    ClientIp,\n    Command,\n    ...Options,\n  })\n  const url = `https://api.${process.env.SANDBOX ? 'sandbox.' : ''}namecheap.com/xml.response?${qs}`\n  LOG(url)\n  const res = await rqt(url)\n  const xml = isXml(res)\n  if (!xml) throw new Error('non-xml response')\n\n  const error = getError(res)\n  if (error) {\n    throw cb(error)\n  }\n\n  const [{ content: CommandResponse }] = extractTag('CommandResponse', res)\n\n  return CommandResponse\n}\n\nexport const getError = (res) => {\n  const [{ content: Errors }] = extractTag('Errors', res)\n  if (Errors.length) {\n    const errors = extractTag('Error', Errors)\n\n    let c\n    let p\n    if (errors.length == 1) {\n      const [{ content, props }] = errors\n      c = content\n      p = props\n    } else {\n      c = errors.map(({ content }) => content).join('; ')\n      p = errors.map(({ props }) => props)\n    }\n    const er = new Error(c)\n    er.props = p\n\n    return er\n  }\n}\n"],"file":"query.js"}