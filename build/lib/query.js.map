{"version":3,"sources":["../../src/lib/query.js"],"names":["LOG","isXml","s","startsWith","query","ApiUser","ApiKey","ClientIp","Command","Options","cb","Error","qs","UserName","url","res","xml","re","e","exec","er","errors","map","r","trim","re1","e1","xmlProps","title","props","split","reduce","acc","p","e2","prop","value","d","ero","length","t","join","transparentError"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,oBAAS,WAAT,CAAZ;AAEA;;AACA,MAAMC,QAAQC,KAAKA,EAAEC,UAAF,CAAa,wCAAb,CAAnB;;AAEA,MAAMC,QAAQ,OAAO;AACnBC,SADmB;AAEnBC,QAFmB;AAGnBC;AAHmB,CAAP,EAIXC,OAJW,EAIFC,UAAU,EAJR,KAIe;AAC3B,QAAMC,KAAK,sBAAX;AACA,MAAI,CAACF,OAAL,EAAc,MAAM,IAAIG,KAAJ,CAAU,wBAAV,CAAN;AACd,QAAMC,KAAK,4BAAU;AACnBP,WADmB;AAEnBC,UAFmB;AAGnBO,cAAUR,OAHS;AAInBE,YAJmB;AAKnBC,WALmB;AAMnB,OAAGC;AANgB,GAAV,CAAX;AAQA,QAAMK,MAAO,0CAAyCF,EAAG,EAAzD;AACAZ,MAAIc,GAAJ;AACA,QAAMC,MAAM,MAAM,kBAAID,GAAJ,CAAlB;AACA,QAAME,MAAMf,MAAMc,GAAN,CAAZ;AACA,MAAI,CAACC,GAAL,EAAU,MAAM,IAAIL,KAAJ,CAAU,kBAAV,CAAN;AACV,QAAMM,KAAK,+BAAX;AACA,QAAMC,IAAID,GAAGE,IAAH,CAAQJ,GAAR,CAAV;;AACA,MAAIG,CAAJ,EAAO;AACL,UAAM,GAAE,GAAGE,EAAL,IAAWF,CAAjB;AACA,UAAMG,SAASD,GACZE,GADY,CACRC,KAAKA,EAAEC,IAAF,EADG,EAEZF,GAFY,CAERC,KAAK;AACR,YAAME,MAAM,4BAAZ;AACA,YAAMC,KAAKD,IAAIN,IAAJ,CAASI,CAAT,CAAX;;AACA,UAAI,CAACG,EAAL,EAAS;AACP1B,YAAI0B,EAAJ;AACA,eAAQ,8BAA6BH,CAAE,EAAvC;AACD;;AACD,YAAM,GAAGI,QAAH,EAAaC,KAAb,IAAsBF,EAA5B;AACA,YAAMG,QAAQF,SAASH,IAAT,GAAgBM,KAAhB,CAAsB,GAAtB,EAA2BC,MAA3B,CAAkC,CAACC,GAAD,EAAMC,CAAN,KAAY;AAC1D,cAAMC,KAAK,gBAAgBf,IAAhB,CAAqBc,CAArB,CAAX;;AACA,YAAI,CAACC,EAAL,EAAS;AACPlC,cAAIkC,EAAJ;AACA,iBAAO,8BAAP;AACD;;AACD,cAAM,GAAGC,IAAH,EAASC,KAAT,IAAkBF,EAAxB;AACA,cAAMG,IAAI;AAAE,WAACF,IAAD,GAAQC;AAAV,SAAV;AACA,eAAO,EAAE,GAAGJ,GAAL;AAAU,aAAGK;AAAb,SAAP;AACD,OATa,EASX,EATW,CAAd;AAUA,aAAO;AAAET,aAAF;AAASC;AAAT,OAAP;AACD,KArBY,CAAf;AAsBA,QAAIS,GAAJ;;AACA,QAAIjB,OAAOkB,MAAP,IAAiB,CAArB,EAAwB;AACtB,YAAM,CAAC;AAAEX,aAAF;AAASC;AAAT,OAAD,IAAqBR,MAA3B;AACAiB,YAAM,IAAI3B,KAAJ,CAAUiB,KAAV,CAAN;AACAU,UAAIT,KAAJ,GAAYA,KAAZ;AACD,KAJD,MAIO;AACL,YAAMW,IAAInB,OAAOC,GAAP,CAAW,CAAC;AAAEM;AAAF,OAAD,KAAeA,KAA1B,EAAiCa,IAAjC,CAAsC,IAAtC,CAAV;AACAH,YAAM,IAAI3B,KAAJ,CAAU6B,CAAV,CAAN;AACAF,UAAIT,KAAJ,GAAYR,OAAOC,GAAP,CAAW,CAAC;AAAEO;AAAF,OAAD,KAAeA,KAA1B,CAAZ;AACD;;AACD,UAAMa,mBAAmBhC,GAAG4B,GAAH,CAAzB;AACA,UAAMI,gBAAN;AACD;;AACD,SAAO3B,GAAP;AACD,CA5DD;;eA8DeX,K","sourcesContent":["import rqt from 'rqt'\nimport { stringify } from 'querystring'\nimport { debuglog } from 'util'\nimport erotic from 'erotic'\n\nconst LOG = debuglog('expensive')\n\n/** @param {string} s */\nconst isXml = s => s.startsWith('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n\nconst query = async ({\n  ApiUser,\n  ApiKey,\n  ClientIp,\n}, Command, Options = {}) => {\n  const cb = erotic()\n  if (!Command) throw new Error('Command must be passed')\n  const qs = stringify({\n    ApiUser,\n    ApiKey,\n    UserName: ApiUser,\n    ClientIp,\n    Command,\n    ...Options,\n  })\n  const url = `https://api.namecheap.com/xml.response?${qs}`\n  LOG(url)\n  const res = await rqt(url)\n  const xml = isXml(res)\n  if (!xml) throw new Error('non-xml response')\n  const re = /<Errors>([\\s\\S.]+?)<\\/Errors>/\n  const e = re.exec(res)\n  if (e) {\n    const [,...er] = e\n    const errors = er\n      .map(r => r.trim())\n      .map(r => {\n        const re1 = /<Error(.*?)>(.+?)<\\/Error>/\n        const e1 = re1.exec(r)\n        if (!e1) {\n          LOG(e1)\n          return `Could not parse the error: ${r}`\n        }\n        const [, xmlProps, title] = e1\n        const props = xmlProps.trim().split(' ').reduce((acc, p) => {\n          const e2 = /(.+?)=\"(.+?)\"/.exec(p)\n          if (!e2) {\n            LOG(e2)\n            return 'could not parse the property'\n          }\n          const [, prop, value] = e2\n          const d = { [prop]: value }\n          return { ...acc, ...d }\n        }, {})\n        return { title, props }\n      })\n    let ero\n    if (errors.length == 1) {\n      const [{ title, props }] = errors\n      ero = new Error(title)\n      ero.props = props\n    } else {\n      const t = errors.map(({ title }) => title).join('; ')\n      ero = new Error(t)\n      ero.props = errors.map(({ props }) => props)\n    }\n    const transparentError = cb(ero)\n    throw transparentError\n  }\n  return res\n}\n\nexport default query\n"],"file":"query.js"}