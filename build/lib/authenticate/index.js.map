{"version":3,"sources":["../../../src/lib/authenticate/index.js"],"names":["LOG","S","process","env","SANDBOX","authenticate","config","user","password","ip","phone","client","Client","obtainSession","signIn","checkValidationError","body2","session","request","returnUrl","token","extractXsrf","AddIpAddress","body","re","res","exec","Error","secondAuth","location","submitCode","b","code","text","fs","data","ctl00$ctl00$ctl00$ctl00$base_content$web_base_content$home_content$page_content_left$CntrlAuthorization$txtAuthVerification","ctl00$ctl00$ctl00$ctl00$base_content$web_base_content$home_content$page_content_left$CntrlAuthorization$btnVerify","headers","type","returnHeaders","test","console","log"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AALA;AAOA,MAAMA,MAAM,oBAAS,WAAT,CAAZ;AAEA,MAAMC,IAAI,CAAC,CAACC,QAAQC,GAAR,CAAYC,OAAxB;AACAJ,IAAI,aAAJ,EAAmBC,CAAnB;AAGA;;;;;;;;;AAQA,MAAMI,eAAe,OAAOC,SAAS,EAAhB,KAAuB;AAC1C,QAAM;AACJC,QADI;AAEJC,YAFI;AAGJC,MAHI;AAIJC;AAJI,MAKFJ,MALJ;AAOA,QAAMK,SAAS,IAAIC,YAAJ,CAAWL,IAAX,EAAiBC,QAAjB,EAA2BP,CAA3B,CAAf;AACA,QAAMU,OAAOE,aAAP,EAAN;AACA,QAAMF,OAAOG,MAAP,EAAN,CAV0C,CAY1C;;AAEAH,SAAOI,oBAAP,GAd0C,CAe1C;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;AACA,QAAMC,QAAQ,MAAMC,QAAQC,OAAR,CAAgBC,SAAhB,CAApB;AACA,QAAMC,QAAQC,YAAYL,KAAZ,CAAd;AAGAL,SAAOW,YAAP,GA/B0C,CAgC1C;AACD,CAjCD,C,CAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMD,cAAeE,IAAD,IAAU;AAC5B,QAAMC,KAAK,0DAAX;AACA,QAAMC,MAAMD,GAAGE,IAAH,CAAQH,IAAR,CAAZ;AACA,MAAI,CAACE,GAAL,EAAU,MAAM,IAAIE,KAAJ,CAAU,wDAAV,CAAN;AACV,QAAM,GAAGP,KAAH,IAAYK,GAAlB;AACA,SAAOL,KAAP;AACD,CAND;AAQA;;;;;;;AAKA,MAAMQ,aAAa,OAAOC,QAAP,EAAiBlB,MAAjB,EAAyBD,KAAzB,KAAmC,CAErD,CAFD;;AAIA,MAAMoB,aAAa,OAAOP,IAAP,EAAaN,OAAb,EAAsBY,QAAtB,KAAmC;AACpD,QAAM,GAAGE,CAAH,IAAQ,sCAAsCL,IAAtC,CAA2CH,IAA3C,KAAoD,EAAlE;AACA,MAAI,CAACQ,CAAL,EAAQ,MAAM,IAAIJ,KAAJ,CAAU,0BAAV,CAAN;AAER,QAAMK,OAAO,MAAM,0BAAU;AAC3BC,UAAO,8BAA6BF,CAAE;AADX,GAAV,CAAnB;AAGA,QAAMG,KAAK,2BAAiBX,IAAjB,CAAX;AACA,QAAMY,OAAO,EACX,GAAGD,EADQ;AAEXE,iIAA6HJ,IAFlH;AAGXK,uHAAmH;AAHxG,GAAb;AAMA,QAAM;AAAEd,UAAMP,KAAR;AAAesB;AAAf,MAA2B,MAAMrB,QAAQC,OAAR,CAAgBW,QAAhB,EAA0B;AAC/DM,QAD+D;AAE/DI,UAAM,MAFyD;AAG/DC,mBAAe;AAHgD,GAA1B,CAAvC;;AAKA,MAAI,uCAAuCC,IAAvC,CAA4CzB,KAA5C,CAAJ,EAAwD;AACtD0B,YAAQC,GAAR,CAAY,iBAAZ;AACA,UAAMlB,MAAM,MAAMK,WAAWd,KAAX,EAAkBC,OAAlB,EAA2BY,QAA3B,CAAlB;AACA,WAAOJ,GAAP;AACD;;AACD,kBAAG,eAAegB,IAAf,CAAoBzB,KAApB,CAAH,EAA+B,0CAA/B;AACA,SAAOsB,QAAQT,QAAf;AACD,CA1BD;;eA4BexB,Y;AAEf","sourcesContent":["/* eslint-disable no-console */\nimport { debuglog } from 'util'\nimport { equal, ok } from 'assert'\nimport { askSingle } from 'reloquent'\nimport { extractFormState, extractOptions, askForNumber } from './lib'\nimport Client from '../web'\n\nconst LOG = debuglog('expensive')\n\nconst S = !!process.env.SANDBOX\nLOG('sandbox: %s', S)\n\n\n/**\n * Run authorisation process. Returns `true` if it passed an an ip address was added, and a string with an error message if there was an error.\n * @param {Config} config Config object\n * @param {string} config.user\n * @param {string} config.password\n * @param {string} config.ip\n * @param {string} config.phone\n */\nconst authenticate = async (config = {}) => {\n  const {\n    user,\n    password,\n    ip,\n    phone,\n  } = config\n\n  const client = new Client(user, password, S)\n  await client.obtainSession()\n  await client.signIn()\n\n  // const sauthLocation = client.getRedirect()\n\n  client.checkValidationError()\n  // const sauthLocation = client.getRedirect(/\\/myaccount\\/twofa\\/secondauth\\.aspx/)\n  // if (sauthLocation) {\n  //   const loc = await secondAuth(sauthLocation, client, phone)\n  // }\n\n  // const loc = await secondAuth(`${host}${headers.location}`, session, phone)\n\n  // if (headers.location.startsWith('/myaccount/twofa/secondauth.aspx')) {\n  //   equal(loc, returnUrl, `Expected to have been redirected to ${returnUrl}`)\n  // }\n\n  // client.\n  const body2 = await session.request(returnUrl)\n  const token = extractXsrf(body2)\n\n\n  client.AddIpAddress()\n  // await handleAppApi(appHost, session, data, 'AddIpAddress', token) // final step to add\n}\n\n\n// const handleAppApi = async (appHost, session, data, path, token) => {\n//   const res = await session.request(`${appHost}${u}${path}`, {\n//     data,\n//     headers: {\n//       'x-ncpl-rcsrf': token,\n//     },\n//   })\n//   if (!res.Success) {\n//     const t = res.Errors.map(({ Message }) => Message).join(', ')\n//     const r = new Error(t)\n//     r.__type = res.__type\n//     throw r\n//   }\n// }\n\nconst extractXsrf = (body) => {\n  const re = /<input type=\"hidden\" id=\"x-ncpl-csrfvalue\" value=\"(.+?)\"/\n  const res = re.exec(body)\n  if (!res) throw new Error('Could not find the x-ncpl-csrfvalue token on the page.')\n  const [, token] = res\n  return token\n}\n\n/**\n *\n * @param {Client} client\n * @param {string} phone\n */\nconst secondAuth = async (location, client, phone) => {\n\n}\n\nconst submitCode = async (body, session, location) => {\n  const [, b] = /Your 6-digit code begins with (\\d)./.exec(body) || []\n  if (!b) throw new Error('Could not send the code.')\n\n  const code = await askSingle({\n    text: `Security code (begins with ${b})`,\n  })\n  const fs = extractFormState(body)\n  const data = {\n    ...fs,\n    ctl00$ctl00$ctl00$ctl00$base_content$web_base_content$home_content$page_content_left$CntrlAuthorization$txtAuthVerification: code,\n    ctl00$ctl00$ctl00$ctl00$base_content$web_base_content$home_content$page_content_left$CntrlAuthorization$btnVerify: 'Submit Security Code',\n  }\n\n  const { body: body2, headers } = await session.request(location, {\n    data,\n    type: 'form',\n    returnHeaders: true,\n  })\n  if (/Oops, you entered an invalid code.+/m.test(body2)) {\n    console.log('Incorrect code.')\n    const res = await submitCode(body2, session, location)\n    return res\n  }\n  ok(/Object moved/.test(body2), 'Expected to be redirected after sign-in.')\n  return headers.location\n}\n\nexport default authenticate\n\n/**\n * @typedef {Object} Config\n * @property {string} user\n * @property {string} password\n * @property {string} ip\n * @property {string} phone\n */\n"],"file":"index.js"}