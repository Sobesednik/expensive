{"version":3,"sources":["../../../src/lib/authenticate/index.js"],"names":["LOG","authenticate","user","password","ip","phone","chrome","port","client","res","Network","Page","DOM","Runtime","Input","requestIntercepted","interceptionId","request","blocked","url","console","log","continueInterceptedRequest","errorReason","undefined","enable","login","loadEventFired","selectPhone","enterCode","navigate","addIpAddress","err","message","close","kill","fetchNewIp","name","csrf","accountPassword","ipAddress","data","j","JSON","stringify","result","exceptionDetails","evaluate","expression","awaitPromise","Error","exception","description","parse","value","__isError","__errorType","Success","Array","isArray","Errors","Message","Date","toLocaleString","replace","submitSelector","selectSelector","options","option","find","i","endsWith","map","join","v","keys","slice","length","text","mapPhoneOptions","answer","getDefault","validation","a","p","some","val","info","r","exec","b","code"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport { debuglog } from 'util'\nimport { equal } from 'assert'\nimport CDP from 'chrome-remote-interface'\nimport Chrome from 'chrome-remote-interface/lib/chrome' // eslint-disable-line no-unused-vars\nimport { askSingle } from 'reloquent'\nimport { mapPhoneOptions, checkAuth, isBlocked, click, evaluate, getValue, setValue, checkLimit } from './lib'\n\nconst LOG = debuglog('expensive')\n\nconst authenticate = async ({\n  user,\n  password,\n  ip, // ip to set\n  phone,\n  chrome,\n}) => {\n  const { port } = chrome\n  LOG('Chrome debugging port running on %s', port)\n\n  /** @type {Chrome} */\n  let client\n  let res\n  try {\n    client = await CDP({\n      port,\n    })\n    const { Network, Page, DOM, Runtime, Input } = client\n\n    Network.requestIntercepted(({ interceptionId, request }) => {\n      const blocked = isBlocked(request.url)\n      if (!blocked) {\n        console.log(request.url)\n      }\n      Network.continueInterceptedRequest({\n        interceptionId,\n        errorReason: blocked ? 'Aborted' : undefined,\n      })\n    })\n    // enable events then start!\n    await Network.enable()\n    await Page.enable()\n    await DOM.enable()\n    await Runtime.enable()\n\n    // await Network.setRequestInterception({ patterns: [{ urlPattern: '*' }] })\n    // await Network.setCacheDisabled({ cacheDisabled: true })\n\n    await login(Runtime, { user, password })\n    await Page.loadEventFired()\n\n    await checkAuth(Runtime)\n\n    await selectPhone(Runtime, phone)\n    await Page.loadEventFired()\n\n    await enterCode(Runtime)\n    await Page.loadEventFired()\n\n    await Page.navigate({ url: 'https://ap.www.namecheap.com/settings/tools/apiaccess/whitelisted-ips' })\n    await Page.loadEventFired()\n\n    await addIpAddress(Runtime, Input, { ip, password })\n    res = true\n  } catch (err) {\n    LOG(err)\n    res = err.message\n  } finally {\n    if (client) {\n      await client.close()\n    }\n  }\n\n  await chrome.kill()\n  console.log('Chrome killed')\n  return res\n}\n\nconst fetchNewIp = async (Runtime, {\n  name,\n  csrf,\n  password: accountPassword,\n  ip: ipAddress,\n}) => {\n  const data = {\n    accountPassword,\n    name,\n    ipAddress,\n  }\n  const j = JSON.stringify(data)\n  const url = 'https://ap.www.namecheap.com/api/v1/ncpl/apiaccess/ui/AddIpAddress'\n  const { result, exceptionDetails } = await Runtime.evaluate({\n    expression: `\n      (async () => {\n        const response = await fetch('${url}', {\n          body: '${j}',\n          cache: 'no-cache',\n          credentials: 'include',\n          headers: {\n            'x-ncpl-rcsrf': '${csrf}',\n            'content-type': 'application/json',\n          },\n          method: 'POST',\n        })\n        const contentType = response.headers.get('content-type')\n        if(contentType && contentType.includes('application/json')) {\n          const j = await response.json()\n          return JSON.stringify(j)\n        }\n        throw new Error(\"haven't got a JSON\")\n      })()\n`,\n    awaitPromise: true,\n  })\n  if (exceptionDetails) {\n    throw new Error(exceptionDetails.exception.description)\n  }\n  const res = JSON.parse(result.value)\n  if (res.__isError) {\n    throw new Error(res.__errorType)\n  }\n  if (!res.Success) {\n    if (!Array.isArray(res.Errors)) {\n      throw new Error('The request was not successful')\n    }\n    const [{ Message }] = res.Errors\n    throw new Error(Message)\n  }\n}\n\nconst addIpAddress = async (Runtime, Input, { ip, password }) => {\n  const name = `expensive ${new Date().toLocaleString()}`.replace(/:/g, '-')\n  const csrf = await evaluate(Runtime, 'document.querySelector(\"#x-ncpl-csrfvalue\").value')\n  await fetchNewIp(Runtime, {\n    password,\n    name,\n    ip,\n    csrf,\n  })\n  // await new Promise(r => setTimeout(r, 1000)) // wait for\n  // await focus(Runtime, '#ip-name')\n  // for (let i = 0; i < name.length; i++) {\n  //   await Input.dispatchKeyEvent({ type: 'char', text: name[i] })\n  // }\n  // await focus(Runtime, '#ip-address')\n  // for (let i = 0; i < ip.length; i++) {\n  //   await Input.dispatchKeyEvent({ type: 'char', text: ip[i] })\n  // }\n  // await evaluate(Runtime, 'document.querySelectorAll(\\'input[type=\"password\"]\\')[1].focus()')\n  // for (let i = 0; i < password.length; i++) {\n  //   await Input.dispatchKeyEvent({ type: 'char', text: password[i] })\n  // }\n  // await evaluate(Runtime, 'document.querySelectorAll(\\'button.gb-btn--primary\\')[1].click()')\n}\n\nconst login = async (Runtime, { user, password }) => {\n  await Runtime.evaluate({\n    expression: `document.querySelector(\"input.nc_username\").value = \"${user}\"`,\n  })\n  await Runtime.evaluate({\n    expression: `document.querySelector(\"input.nc_password\").value = \"${password}\"`,\n  })\n  await Runtime.evaluate({\n    expression: 'document.querySelector(\"input.nc_login_submit\").click()',\n  })\n}\n\nconst selectPhone = async (Runtime, phone) => {\n  const submitSelector = 'input[type=\"submit\"]'\n  const selectSelector = 'select.verification-method'\n  /** @type {{v: string, i: string}[]} */\n  const options = await evaluate(Runtime, `\n  Array.from(document.querySelectorAll('${selectSelector} > option'))\n    .map(p => ({v: p.value, i: p.innerHTML }))`, true)\n\n  if (phone) {\n    const option = options.find(({ i }) => i.endsWith(phone))\n    if (!option) throw new Error(`A phone number ending with ${phone} cannot be found. Added numbers: ${options.map(({ i }) => i).join(', ')}`)\n    await evaluate(Runtime, `document.querySelector('${selectSelector}').value = \"${option.v}\"`)\n    await evaluate(Runtime, `document.querySelector('${submitSelector}').click()`)\n    return\n  }\n\n  const keys = options.map(({ i }) => i.slice(i.length - 3))\n\n  if (options.length) {\n    const text = `Which phone number to use for 2 factor auth\n${\n  options\n    .map(({ i }) => ` ${i}`)\n    .map(mapPhoneOptions)\n    .join('\\n')\n}\nenter last 3 digits`\n\n    const answer = await askSingle({\n      text,\n      async getDefault() {\n        return phone || keys[0]\n      },\n      validation(a) {\n        const p = options.some(({ i }) => i.endsWith(a))\n        if (!p) {\n          throw new Error('unknown number entered')\n        }\n      },\n    })\n\n    console.log(answer)\n    const { v } = options.find(({ i }) => i.endsWith(answer))\n    await Runtime.evaluate({\n      expression: `document.querySelector('select.verification-method').value = \"${v}\"`,\n    })\n  }\n  await Runtime.evaluate({\n    expression: `document.querySelector('input[type=\"submit\"]').click()`, // eslint-disable-line\n  })\n}\n\nconst enterCode = async (Runtime) => {\n  const val = await getValue(Runtime, 'input[type=\"submit\"]')\n  equal(val, 'Submit Security Code', 'Did not get to the page with verification of security code')\n\n  /** @type {string} */\n  const info = await Runtime.evaluate({\n    expression: `document.querySelector('.info').innerText`, // eslint-disable-line\n  })\n  const r = /Your \\d-digit code begins with (\\d)/.exec(info.result.value)\n  if (!r) {\n    await checkLimit(Runtime)\n    throw new Error('Could not enter the code') // return\n  }\n\n  const [, b] = r\n\n  const code = await askSingle({\n    text: `Security code (begins with ${b})`,\n  })\n\n  await setValue(Runtime, 'input[placeholder=\"Verification Code\"]', code)\n  await click(Runtime, 'input[type=\"submit\"]')\n}\n\nexport default authenticate\n"],"file":"index.js"}