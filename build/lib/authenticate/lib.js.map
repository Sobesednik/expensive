{"version":3,"sources":["../../../src/lib/authenticate/lib.js"],"names":["extractOptions","body","re","res","options","exec","value","title","last","push","numberRe","mapPhoneOptions","o","r","g","n","gr","co","askForNumber","phone","text","map","join","answer","getDefault","validation","a","p","some","Error","find","extractFormState","inputs","name","reduce","acc"],"mappings":";;;;;;;AAAA;;AACA;;AAEO,MAAMA,iBAAkBC,IAAD,IAAU;AACtC,QAAMC,KAAK,sDAAX;AACA,MAAIC,GAAJ;AACA,QAAMC,UAAU,EAAhB;;AACA,SAAO,CAACD,MAAMD,GAAGG,IAAH,CAAQJ,IAAR,CAAP,MAA0B,IAAjC,EAAuC;AACrC,UAAM,GAAGK,KAAH,EAAUC,KAAV,EAAiBC,IAAjB,IAAyBL,GAA/B;AACAC,YAAQK,IAAR,CAAa;AACXH,WADW;AAEXC,WAFW;AAGXC;AAHW,KAAb;AAKD;;AACD,SAAOJ,OAAP;AACD,CAbM;;;AAeP,MAAMM,WAAW,gBAAjB;;AAEA,MAAMC,kBAAkBC,KAAK;AAC3B,QAAMC,IAAIH,SAASL,IAAT,CAAcO,CAAd,CAAV;AACA,MAAI,CAACC,CAAL,EAAQ,OAAOD,CAAP;AACR,QAAM,GAAGE,CAAH,EAAMC,CAAN,IAAWF,CAAjB;AACA,QAAMG,KAAK,aAAEF,CAAF,EAAK,MAAL,CAAX;AACA,QAAMG,KAAM,GAAED,EAAG,GAAED,CAAE,EAArB;AACA,SAAOE,EAAP;AACD,CAPD;;AASO,MAAMC,eAAe,OAAOd,OAAP,EAAgBe,KAAhB,KAA0B;AACpD,QAAMC,OAAQ;EAEdhB,QACGiB,GADH,CACO,CAAC;AAAEd;AAAF,GAAD,KAAgB,IAAGA,KAAM,EADhC,EAEGc,GAFH,CAEOV,eAFP,EAGGW,IAHH,CAGQ,IAHR,CAID;oBANC;AASA,QAAMC,SAAS,MAAM,0BAAU;AAC7BH,QAD6B;;AAE7B,UAAMI,UAAN,GAAmB;AACjB,aAAOL,SAASf,QAAQ,CAAR,EAAWI,IAA3B;AACD,KAJ4B;;AAK7BiB,eAAWC,CAAX,EAAc;AACZ,YAAMC,IAAIvB,QAAQwB,IAAR,CAAa,CAAC;AAAEpB;AAAF,OAAD,KAAcA,QAAQkB,CAAnC,CAAV;;AACA,UAAI,CAACC,CAAL,EAAQ;AACN,cAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;AACD;AACF;;AAV4B,GAAV,CAArB;AAaA,QAAM;AAAEvB;AAAF,MAAYF,QAAQ0B,IAAR,CAAa,CAAC;AAAEtB;AAAF,GAAD,KAAcA,QAAQe,MAAnC,CAAlB;AACA,SAAOjB,KAAP;AACD,CAzBM;;;;AA2BA,MAAMyB,mBAAoB9B,IAAD,IAAU;AACxC,QAAMC,KAAK,mEAAX;AACA,MAAIC,GAAJ;AACA,QAAM6B,SAAS,EAAf;;AACA,SAAO,CAAC7B,MAAMD,GAAGG,IAAH,CAAQJ,IAAR,CAAP,MAA0B,IAAjC,EAAuC;AACrC,UAAM,GAAGgC,IAAH,EAAS3B,KAAT,IAAkBH,GAAxB;AACA6B,WAAOvB,IAAP,CAAY;AACVwB,UADU;AAEV3B;AAFU,KAAZ;AAID;;AACD,QAAMO,IAAImB,OAAOE,MAAP,CAAc,CAACC,GAAD,EAAM;AAAEF,QAAF;AAAQ3B;AAAR,GAAN,KAA0B;AAChD,WAAO,EACL,GAAG6B,GADE;AAEL,OAAE,KAAIF,IAAK,EAAX,GAAe3B;AAFV,KAAP;AAID,GALS,EAKP,EALO,CAAV;AAMA,SAAOO,CAAP;AACD,CAlBM","sourcesContent":["import { askSingle } from 'reloquent'\nimport { c } from 'erte'\n\nexport const extractOptions = (body) => {\n  const re = /<option value=\"(\\d+-phone)\">(.+?(\\d\\d\\d))<\\/option>/g\n  let res\n  const options = []\n  while ((res = re.exec(body)) !== null) {\n    const [, value, title, last] = res\n    options.push({\n      value,\n      title,\n      last,\n    })\n  }\n  return options\n}\n\nconst numberRe = /(.+?)(\\d\\d\\d)$/\n\nconst mapPhoneOptions = o => {\n  const r = numberRe.exec(o)\n  if (!r) return o\n  const [, g, n] = r\n  const gr = c(g, 'grey')\n  const co = `${gr}${n}`\n  return co\n}\n\nexport const askForNumber = async (options, phone) => {\n  const text = `Which phone number to use for 2 factor auth\n${\n  options\n    .map(({ title }) => ` ${title}`)\n    .map(mapPhoneOptions)\n    .join('\\n')\n}\nenter last 3 digits`\n\n  const answer = await askSingle({\n    text,\n    async getDefault() {\n      return phone || options[0].last\n    },\n    validation(a) {\n      const p = options.some(({ last }) => last == a)\n      if (!p) {\n        throw new Error('Unknown number entered.')\n      }\n    },\n  })\n\n  const { value } = options.find(({ last }) => last == answer)\n  return value\n}\n\nexport const extractFormState = (body) => {\n  const re = /<input type=\"hidden\" name=\"__(\\w+)\" id=\"__\\w+\" value=\"(.*?)\" \\/>/g\n  let res\n  const inputs = []\n  while ((res = re.exec(body)) !== null) {\n    const [, name, value] = res\n    inputs.push({\n      name,\n      value,\n    })\n  }\n  const r = inputs.reduce((acc, { name, value }) => {\n    return {\n      ...acc,\n      [`__${name}`]: value,\n    }\n  }, {})\n  return r\n}\n"],"file":"lib.js"}