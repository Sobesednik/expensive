{"version":3,"sources":["../../../src/lib/web/index.js"],"names":["LOG","USER_AGENT","getHost","S","getApHost","handleJsonRes","res","__isError","err","Error","Message","Object","assign","Success","t","Errors","map","join","r","__type","Client","constructor","user","password","sandbox","host","appHost","_user","_password","session","Session","headers","_session","makeUrl","page","u","makeAppHostUrl","makeSettingsUrl","args","obtainSession","makeHostUrl","SessionKey","request","signIn","encodeURIComponent","whitelistedIps","data","hidden_LoginPassword","LoginUserName","LoginPassword","sessionEncryptValue","postRequest","type","location","test","url","makeFullHostUrl","secondAuth","fs","body","options","extractOptions","length","value","askForNumber","phone","extractFormState","ctl00$ctl00$ctl00$ctl00$base_content$web_base_content$home_content$page_content_left$CntrlAuthorization$ddlAuthorizeList","ctl00$ctl00$ctl00$ctl00$base_content$web_base_content$home_content$page_content_left$CntrlAuthorization$btnSendVerification","body2","match","loc","submitCode","login","RemoveIpAddresses","names","accountPassword","AddIpAddress","name","Date","toLocaleString","replace","ipAddress","ip","GetIpAddresses","saveSession","sessionFile","cookie","readSession","token","returnHeaders","parsedBody","checkValidationError","validationErrorRe","exec","getRedirect","to","RegExp"],"mappings":"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","sourcesContent":["import { ok } from 'assert'\nimport bosom from 'bosom'\nimport Session from 'rqt/build/session'\nimport { debuglog } from 'util'\n\nconst LOG = debuglog('expensive')\n\nconst USER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36'\n\nconst getHost = (S) => {\n  return `https://www.${S ? 'sandbox.' : ''}namecheap.com`\n}\nconst getApHost = (S) => {\n  return `https://ap.www.${S ? 'sandbox.' : ''}namecheap.com`\n}\n\nconst handleJsonRes = (res) => {\n  if (res.__isError) {\n    const err = new Error(res.Message)\n    Object.assign(err, res)\n    throw err\n  }\n  if (!res.Success) {\n    const t = res.Errors.map(({ Message }) => Message).join(', ')\n    const r = new Error(t)\n    r.__type = res.__type\n    throw r\n  }\n  return res\n}\n\nexport default class Client {\n  /**\n   * Create a new web client.\n   * @param {string} host\n   * @param {Session} session\n   * @param {string} password\n   */\n  constructor(user, password, sandbox = false) {\n    this.host = getHost(sandbox)\n    this.appHost = getApHost(sandbox)\n    this._user = user\n    this._password = password\n\n    const session = new Session({\n      headers: {\n        'User-Agent': USER_AGENT,\n      },\n    })\n    this._session = session\n  }\n  get user() {\n    return this._user\n  }\n  makeUrl(page) {\n    const u = this.makeAppHostUrl('api', 'v1', 'ncpl', 'apiaccess', 'ui', page)\n    return u\n  }\n  makeSettingsUrl(...args) {\n    const u = this.makeAppHostUrl('settings', ...args)\n    return u\n  }\n  async obtainSession() {\n    const u = this.makeHostUrl('cart', 'ajax', 'SessionHandler.ashx')\n    const { SessionKey } = await this.request(u)\n    ok(SessionKey, `Could not acquire the session key for ${u}.`)\n    this.SessionKey = SessionKey\n  }\n  makeHostUrl(...args) {\n    return `${this.host}/${args.join('/')}`\n  }\n  makeAppHostUrl(...args) {\n    return `${this.appHost}/${args.join('/')}`\n  }\n  async signIn() {\n    const r = encodeURIComponent(this.whitelistedIps)\n    const u = this.makeHostUrl('myaccount', `login-signup.aspx?ReturnUrl=${r}`)\n    const data = {\n      hidden_LoginPassword: '',\n      LoginUserName: this.user,\n      LoginPassword: this._password,\n      sessionEncryptValue: this.SessionKey,\n    }\n    await this.postRequest(u, { data, type: 'form' })\n    if (this.headers.location == this.whitelistedIps) return\n    if (/\\/myaccount\\/twofa\\/secondauth\\.aspx/.test(this.headers.location)) {\n      const url = this.makeFullHostUrl(this.headers.location)\n      await this.secondAuth(url)\n    }\n\n    // debugger\n  }\n  makeFullHostUrl(url) {\n    return `${this.host}${url}`\n  }\n  async secondAuth(location) {\n    let fs\n    let data\n\n    const body = await this.request(location)\n\n    ok(/Select Phone Contact Number/.test(body), 'Could not find the Select Phone section.')\n\n    const options = extractOptions(body)\n    ok(options.length, 'Could not find any numbers.')\n\n    const value = await askForNumber(options, phone)\n\n    fs = extractFormState(body)\n    data = {\n      ...fs,\n      ctl00$ctl00$ctl00$ctl00$base_content$web_base_content$home_content$page_content_left$CntrlAuthorization$ddlAuthorizeList: value,\n      ctl00$ctl00$ctl00$ctl00$base_content$web_base_content$home_content$page_content_left$CntrlAuthorization$btnSendVerification: 'Proceed with Login',\n    }\n    const body2 = await session.request(location, {\n      data,\n      type: 'form',\n    })\n\n    if (/You have reached the limit on the number.+/m.test(body2)) {\n      throw new Error(body2.match(/You have reached the limit on the number.+/m)[0])\n    }\n    ok(/We sent a message with the verification code/.test(body2), 'Could not find the code entry section.')\n\n    const loc = await submitCode(body2, session, location)\n    return loc\n  }\n  /**\n   * @returns {Session} an instance of the session assigned on initialisation.\n   */\n  get session() {\n    return this._session\n  }\n  async login() {\n\n  }\n  /**\n   * @param {string} host THe host\n   * @param {Session} session rqt session\n   */\n  async RemoveIpAddresses(names) {\n    const page = 'RemoveIpAddresses'\n    await this.postRequest(page, {\n      names,\n      accountPassword: this.password,\n    })\n    debugger\n    // return body\n  }\n  /**\n   *\n   * @param {Result} res\n   */\n\n  async AddIpAddress() {\n    const name = `expensive ${new Date().toLocaleString()}`.replace(/:/g, '-')\n    const data = {\n      name,\n      accountPassword: password,\n      ipAddress: ip,\n    }\n  }\n\n  async GetIpAddresses() {\n\n    // const res = await session.request(`${host}/settings/tools/apiaccess/whitelisted-ips`)\n    return res\n  }\n  async saveSession(session) {\n    await bosom(sessionFile, session.cookie)\n  }\n  async readSession(session) {\n    const cookie = await bosom(sessionFile)\n    session.cookie = cookie\n  }\n  async postRequest(url, { data, type, token }) {\n    const { body, headers } = await this.session.request(url, {\n      data,\n      ...(token ? {\n        headers: {\n          'x-ncpl-rcsrf': token,\n        },\n      } : {}),\n      ...(type ? { type } : {}),\n      returnHeaders: true,\n    })\n    this.body = body\n    this.headers = headers\n    if (typeof this.body == 'object') {\n      this.parsedBody = handleJsonRes(this.body) // parse\n    }\n    return { body, headers }\n  }\n  checkValidationError(body = this.body) {\n    const validationErrorRe = /<strong class=\"title\">Validation Error<\\/strong>\\s+<div>(.+?)<\\/div>/\n    const [, err] = validationErrorRe.exec(body) || []\n    if (err) throw new Error(err.replace(/(<([^>]+)>)/ig, ''))\n  }\n  /**\n   *\n   * @param {*} to\n   * @param {*} headers\n   * @returns {string|false} Will return a redirect location\n   */\n  getRedirect(to, headers = this.headers) {\n    const { location } = headers\n    if (to instanceof RegExp && to.test(location)) {\n      return location\n    } else if (location == to) {\n      return location\n    }\n    return false\n    // else {\n    //   t = new RegExp('^$')\n    // }\n    // if (headers.location.startsWith('/myaccount/twofa/secondauth.aspx')) {\n    //   equal(loc, returnUrl, `Expected to have been redirected to ${returnUrl}`)\n    // }\n  }\n  async request(url) {\n    const { body, headers } = await this.session.request(url, {\n      returnHeaders: true,\n    })\n    return body\n    // try to extract token into this.token\n  }\n  get whitelistedIps() {\n    return this.makeSettingsUrl('tools', 'apiaccess', 'whitelisted-ips')\n  }\n\n  // async whitelistedIps() {\n  //   const u =\n  //   const res = await this.request(u)\n  //   return res\n  // }\n  // getReturnUrl(page) {\n  //   return\n  // }\n}\n\nconst sessionFile = '.expensive-session.json'\n\n\n/**\n * @typedef {Object} Result\n * @property {boolean} __isError\n * @property {string} Message\n * @property {{ Message: String }[]} Errors\n * @property {strings[]} Warnings\n * @property {boolean} Success\n */\n"],"file":"index.js"}