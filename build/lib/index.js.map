{"version":3,"sources":["../../src/lib/index.js"],"names":["validateDomains","arr","reduce","acc","current","allZones","isSingleWord","d","test","makeList","zones","z","length","filter","zone","includes","res","map","s","getPropValue","val","parseInt","propsRe","extractProps","t","r","exec","key","value","push","execRes","re","args","extractTag","tag","string","RegExp","_p","_c","p","replace","trim","props","item","content","TICK","CROSS","DASH","day","mapDomains","domains","domain","Created","Expires","IsOurDNS","cr","Date","parse","e","getTime","Expiry","Math","round","abs","since","Years","getUTCFullYear","Since","DNS","getWhois"],"mappings":";;;;;;;AAAA;;AAEO,MAAMA,kBAAmBC,GAAD,IAASA,IAAIC,MAAJ,CAAW,CAACC,GAAD,EAAMC,OAAN,KAAkB;AACnE,SAAOD,OAAO,OAAOC,OAAP,IAAkB,QAAhC;AACD,CAFuC,EAErC,IAFqC,CAAjC;;;AAIA,MAAMC,WAAW,CACtB,KADsB,EAEtB,KAFsB,EAGtB,KAHsB,EAItB,KAJsB,EAKtB,IALsB,EAMtB,IANsB,EAOtB,IAPsB,EAQtB,IARsB,EAStB,IATsB,EAUtB,KAVsB,CAAjB;;;AAaA,MAAMC,eAAeC,KAAK,CAAC,KAAKC,IAAL,CAAUD,CAAV,CAA3B;;;;AAEA,MAAME,WAAW,CAACF,CAAD,EAAIG,KAAJ,KAAc;AACpC,QAAMC,IAAID,MAAME,MAAN,GAAeP,SAASQ,MAAT,CAAgBC,QAAQ;AAC/C,WAAOJ,MAAMK,QAAN,CAAeD,IAAf,CAAP;AACD,GAFwB,CAAf,GAELT,QAFL;AAGA,QAAMW,MAAML,EAAEM,GAAF,CAAMC,KAAM,GAAEX,CAAE,IAAGW,CAAE,EAArB,CAAZ;AACA,SAAOF,GAAP;AACD,CANM;;;;AAQP,MAAMG,eAAgBC,GAAD,IAAS;AAC5B,MAAIA,OAAO,MAAX,EAAmB,OAAO,IAAP;AACnB,MAAIA,OAAO,OAAX,EAAoB,OAAO,KAAP;;AACpB,MAAI,QAAQZ,IAAR,CAAaY,GAAb,CAAJ,EAAuB;AACrB,WAAOC,SAASD,GAAT,EAAc,EAAd,CAAP;AACD;;AACD,SAAOA,GAAP;AACD,CAPD;;AASA,MAAME,UAAU,gBAAhB;;AACA,MAAMC,eAAgBL,CAAD,IAAO;AAC1B,MAAIM,CAAJ;AACA,QAAMC,IAAI,EAAV;;AACA,SAAM,CAACD,IAAIF,QAAQI,IAAR,CAAaR,CAAb,CAAL,MAA0B,IAAhC,EAAsC;AACpC,UAAM,GAAGS,GAAH,EAAQC,KAAR,IAAiBJ,CAAvB;AACAC,MAAEI,IAAF,CAAO;AACLF,SADK;AAELC,aAAOT,aAAaS,KAAb;AAFF,KAAP;AAID;;AACD,SAAOH,EAAEvB,MAAF,CAAS,CAACC,GAAD,EAAM;AAAEwB,OAAF;AAAOC;AAAP,GAAN,MAA0B,EACxC,GAAGzB,GADqC;AAExC,KAACwB,GAAD,GAAOC;AAFiC,GAA1B,CAAT,EAGH,EAHG,CAAP;AAID,CAdD;;AAiBA,MAAME,UAAU,CAACC,EAAD,EAAKb,CAAL,KAAW;AACzB,QAAMF,MAAMe,GAAGL,IAAH,CAAQR,CAAR,CAAZ;AACA,MAAI,CAACF,GAAL,EAAU,OAAOA,GAAP;AACV,QAAM,GAAG,GAAGgB,IAAN,IAAchB,GAApB;AACA,SAAOgB,IAAP;AACD,CALD;;AAOO,MAAMC,aAAa,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACzC,QAAMJ,KAAK,IAAIK,MAAJ,CAAY,IAAGF,GAAI,sCAAqCA,GAAI,KAA5D,EAAkE,GAAlE,CAAX;AACA,QAAMT,IAAI,EAAV;AAEA,MAAID,CAAJ;;AACA,SAAO,CAACA,IAAIM,QAAQC,EAAR,EAAYI,MAAZ,CAAL,MAA8B,IAArC,EAA2C;AACzC,QAAI,CAACX,EAAEZ,MAAP,EAAe;AACf,UAAM,CAACyB,KAAK,EAAN,EAAUC,KAAK,EAAf,IAAqBd,CAA3B;;AACA,UAAMe,IAAIF,GAAGG,OAAH,CAAW,KAAX,EAAkB,EAAlB,EAAsBC,IAAtB,EAAV;;AACA,UAAMC,QAAQnB,aAAagB,CAAb,CAAd;AACA,UAAMI,OAAO;AACXD,WADW;AAEXE,eAASN,GAAGG,IAAH;AAFE,KAAb;AAIAhB,MAAEI,IAAF,CAAOc,IAAP;AACD;;AACD,SAAOlB,CAAP;AACD,CAjBM;;;AAmBP,MAAMoB,OAAO,aAAE,QAAF,EAAY,OAAZ,CAAb;AACA,MAAMC,QAAQ,aAAE,QAAF,EAAY,KAAZ,CAAd;AACA,MAAMC,OAAO,aAAE,GAAF,EAAO,MAAP,CAAb;AAEA,MAAMC,MAAM,KAAG,EAAH,GAAM,EAAN,GAAS,IAArB;;AAEO,MAAMC,aAAcC,OAAD,IAAa;AACrC,SAAOA,QAAQjC,GAAR,CAAYkC,UAAU;AAC3B,UAAM;AAAEC,aAAF;AAAWC,aAAX;AAAoBC;AAApB,QAAiCH,MAAvC;AACA,UAAMI,KAAKC,KAAKC,KAAL,CAAWL,OAAX,CAAX;AACA,UAAMM,IAAIF,KAAKC,KAAL,CAAWJ,OAAX,CAAV;AACA,UAAM7B,IAAK,IAAIgC,IAAJ,EAAD,CAAWG,OAAX,EAAV;AACA,UAAMC,SAASC,KAAKC,KAAL,CAAWD,KAAKE,GAAL,CAAS,CAACL,IAAIlC,CAAL,IAAUwB,GAAnB,CAAX,CAAf;AACA,UAAMgB,QAAQH,KAAKC,KAAL,CAAWD,KAAKE,GAAL,CAAS,CAACvC,IAAI+B,EAAL,IAAWP,GAApB,CAAX,CAAd;AACA,UAAMzC,IAAIiB,IAAI,IAAIgC,IAAJ,CAASD,EAAT,EAAaI,OAAb,EAAd;AACA,UAAMM,QAAQJ,KAAKE,GAAL,CAAS,IAAIP,IAAJ,CAASjD,CAAT,EAAY2D,cAAZ,KAA+B,IAAxC,CAAd;AACA,WAAO,EACL,GAAGf,MADE;AAELgB,aAAOH,KAFF;AAGLJ,YAHK;AAILK,WAJK;AAKLG,WAAKd;AALA,KAAP;AAOD,GAhBM,CAAP;AAiBD,CAlBM;;;;AAoBA,MAAMe,WAAYzC,KAAD,IAAW;AACjC,MAAIA,SAAS,SAAb,EAAwB,OAAO;AAAEA,WAAOiB,IAAT;AAAejC,YAAQ;AAAvB,GAAP;AACxB,MAAIgB,SAAS,YAAb,EAA2B,OAAO;AAAEA,WAAOmB,IAAT;AAAenC,YAAQ;AAAvB,GAAP;AAC3B,SAAO;AAAEgB,SAAF;AAAShB,YAAQgB,MAAMhB;AAAvB,GAAP;AACD,CAJM","sourcesContent":["import { c } from 'erte'\n\nexport const validateDomains = (arr) => arr.reduce((acc, current) => {\n  return acc && typeof current == 'string'\n}, true)\n\nexport const allZones = [\n  'com',\n  'net',\n  'org',\n  'biz',\n  'co',\n  'cc',\n  'io',\n  'bz',\n  'nu',\n  'app',\n]\n\nexport const isSingleWord = d => !/\\./.test(d)\n\nexport const makeList = (d, zones) => {\n  const z = zones.length ? allZones.filter(zone => {\n    return zones.includes(zone)\n  }) : allZones\n  const res = z.map(s => `${d}.${s}`)\n  return res\n}\n\nconst getPropValue = (val) => {\n  if (val == 'true') return true\n  if (val == 'false') return false\n  if (/^\\d+$/.test(val)) {\n    return parseInt(val, 10)\n  }\n  return val\n}\n\nconst propsRe = /(\\w+)=\"(.*?)\"/g\nconst extractProps = (s) => {\n  let t\n  const r = []\n  while((t = propsRe.exec(s)) !== null) {\n    const [, key, value] = t\n    r.push({\n      key,\n      value: getPropValue(value),\n    })\n  }\n  return r.reduce((acc, { key, value }) => ({\n    ...acc,\n    [key]: value,\n  }), {})\n}\n\n\nconst execRes = (re, s) => {\n  const res = re.exec(s)\n  if (!res) return res\n  const [, ...args] = res\n  return args\n}\n\nexport const extractTag = (tag, string) => {\n  const re = new RegExp(`<${tag}( .[^>]+)?(?: /)?>(?:([\\\\s\\\\S]+?)</${tag}>)?`, 'g')\n  const r = []\n\n  let t\n  while ((t = execRes(re, string)) !== null) {\n    if (!t.length) continue\n    const [_p = '', _c = ''] = t\n    const p = _p.replace(/\\/$/, '').trim()\n    const props = extractProps(p)\n    const item = {\n      props,\n      content: _c.trim(),\n    }\n    r.push(item)\n  }\n  return r\n}\n\nconst TICK = c('\\u2713', 'green')\nconst CROSS = c('\\u2717', 'red')\nconst DASH = c('-', 'grey')\n\nconst day = 24*60*60*1000\n\nexport const mapDomains = (domains) => {\n  return domains.map(domain => {\n    const { Created, Expires, IsOurDNS } = domain\n    const cr = Date.parse(Created)\n    const e = Date.parse(Expires)\n    const t = (new Date).getTime()\n    const Expiry = Math.round(Math.abs((e - t) / day))\n    const since = Math.round(Math.abs((t - cr) / day))\n    const d = t - new Date(cr).getTime()\n    const Years = Math.abs(new Date(d).getUTCFullYear() - 1970)\n    return {\n      ...domain,\n      Since: since,\n      Expiry,\n      Years,\n      DNS: IsOurDNS,\n    }\n  })\n}\n\nexport const getWhois = (value) => {\n  if (value == 'ENABLED') return { value: TICK, length: 1 }\n  if (value == 'NOTPRESENT') return { value: DASH, length: 1 }\n  return { value, length: value.length }\n}\n"],"file":"index.js"}