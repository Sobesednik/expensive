{"version":3,"sources":["../../src/lib/get-config.js"],"names":["LOG","getConfig","config","packageName","global","opts","Error","p","ApiUser","ApiKey","ClientIp","questions"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,oBAAS,WAAT,CAAZ;AAEA;;;;;;;;;;;;;;;;;AAgBA,MAAMC,YAAY,OAAOC,SAAS,EAAhB,KAAuB;AACvC,QAAM;AACJC,eADI;AACSC,aAAS,KADlB;AACyBC,WAAO;AADhC,MAEFH,MAFJ;AAGA,MAAI,CAACE,MAAD,IAAW,CAACD,WAAhB,EAA6B,MAAM,IAAIG,KAAJ,CAAU,uEAAV,CAAN;AAC7B,QAAMC,IAAIH,UAAU,CAACD,WAAX,GAAyB,WAAzB,GAAwC,GAAEA,WAAY,YAAhE;AACAH,MAAI,eAAJ,EAAqBO,CAArB;AACA,QAAM;AACJC,WADI;AAEJC,UAFI;AAGJC;AAHI,MAIF,MAAM,qBAAOH,CAAP,EAAUI,kBAAV,EAAqBN,IAArB,CAJV;AAKA,SAAO;AAAEG,WAAF;AAAWC,UAAX;AAAmBC;AAAnB,GAAP;AACD,CAbD;;eAeeT,S;AAEf","sourcesContent":["import africa from 'africa'\nimport { debuglog } from 'util'\nimport questions from '../questions'\n\nconst LOG = debuglog('expensive')\n\n/**\n * @typedef {Object} AfricaOpts\n * @property {function} [rcNameFunction] a function which returns the name of the rc file to store data in, e.g., packageName => `.${packageName}rc`,\n * @property {string} [homedir] where to store the rc file.\n * @property {boolean} [force=false] force asking questions again to update the config\n *\n *\n * An authentication function which will read the package's rc file, or the global expensive rc file.\n * @typedef {Object} AuthConfig\n * @property {string} [packageName] name of the package which implements the expensive API. The `.packagename-expensive.rc` file will be created in the home directory.\n * @property {boolean} [global=false] Whether to use the global expensive config.\n * @property {AfricaOpts} [opts] A configuration to pass to africa.\n *\n * @param {AuthConfig} config\n * @returns {ReturnType} An object read from local rc file.\n */\nconst getConfig = async (config = {}) => {\n  const {\n    packageName, global = false, opts = {},\n  } = config\n  if (!global && !packageName) throw new Error('An implementing package name should be given if not using a global rc')\n  const p = global && !packageName ? 'expensive' : `${packageName}-expensive`\n  LOG('Reading %s rc', p)\n  const {\n    ApiUser,\n    ApiKey,\n    ClientIp,\n  } = await africa(p, questions, opts)\n  return { ApiUser, ApiKey, ClientIp }\n}\n\nexport default getConfig\n\n/**\n * @typedef {Object} ReturnType\n * @property {string} ApiUser namecheap user\n * @property {string} ApiKey namecheap api key\n * @property {string} ClientIp client ip\n */\n\n"],"file":"get-config.js"}